<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qioh的随记</title>
  
  <subtitle>不想长大，但没办法</subtitle>
  <link href="https://qioh.github.io/atom.xml" rel="self"/>
  
  <link href="https://qioh.github.io/"/>
  <updated>2022-01-12T14:09:17.232Z</updated>
  <id>https://qioh.github.io/</id>
  
  <author>
    <name>祈qioh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络与矩阵</title>
    <link href="https://qioh.github.io/2022/01/12/net-matrix/"/>
    <id>https://qioh.github.io/2022/01/12/net-matrix/</id>
    <published>2022-01-11T16:00:00.000Z</published>
    <updated>2022-01-12T14:09:17.232Z</updated>
    
    <content type="html"><![CDATA[<p>╮(╯▽╰)╭</p><span id="more"></span><h1 id="网络与矩阵">网络与矩阵</h1><p>在这里，将<strong>图</strong>和<strong>网络</strong>的概念不加区分。</p><h2 id="网络">网络</h2><p>网络由<strong>节点</strong>(vertex)和<strong>链接</strong>(link)构成，节点成用序号1,2,<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0.43ex" xmlns="http://www.w3.org/2000/svg" width="2.652ex" height="0.271ex" role="img" focusable="false" viewBox="0 -310 1172 120"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g></g></g></svg></mjx-container></span>或者使用符号<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="8.834ex" height="1.441ex" role="img" focusable="false" viewBox="0 -443 3904.4 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(921.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1366.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2287.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2732.4,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g></g></g></svg></mjx-container></span>表示；链接常用有序对表示，如<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2222.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>或<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.936ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3065.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1310.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1755.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2676.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p><ul><li>pic 1</li></ul><p><img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/1.png" alt="" width="197" data-align="inline"></p><p>常用的几种图：无向图，有向图，赋权图，有时允许自己与自己相连的图</p><p>上面的图就是一张无向图；也可以为链接指定方向，成为有向图（有向网络）；可以为链接赋予一个数（权重），变成赋权图（加权网络）；可以允许点与自己构成链接【这种情况不常考虑】。</p><h2 id="网络的参数与性质">网络的参数与性质</h2><h3 id="度">度</h3><p>记某个网络共有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>个点，有<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 681 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span>条链接</p><ul><li><p>度：指某个点所链接的点的个数（即指某个点所拥有的链接数）。如pic1中，点2的度为3，记为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="6.315ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 2791.1 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mn" transform="translate(554,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1235.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2291.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>平均度：某个图所有点的度的平均数，记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="27.436ex" height="2.953ex" role="img" focusable="false" viewBox="0 -960 12126.7 1305"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1055.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1854.6,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(778,0)"></path></g><g data-mml-node="mfrac" transform="translate(3688.3,0)"><g data-mml-node="mn" transform="translate(357.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><rect width="827.9" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(4922.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(7376.2,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8501.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9557.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(10057.7,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10738.7,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(11238.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span></p></li><li><p>度分布：记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="2.159ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 954.4 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(536,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>，为“<strong>网络中随机选出的一个节点其度为k</strong>”的概率。如pic1的度分布为：<img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/2.png" alt="" width="432" data-align="inline"></p></li><li><p>集聚系数：设节点<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>的度为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.918ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 848 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.28ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1008 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>记为节点<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>的邻居之间的链接数，集聚系数记为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="19.665ex" height="3.352ex" role="img" focusable="false" viewBox="0 -934.5 8691.7 1481.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1319.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2375.5,0)"><g data-mml-node="mrow" transform="translate(1013.4,451.6) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(848,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1237,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2084.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2862.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3362.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="2853" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5746.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6691.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(6969.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7469.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7913.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8413.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>。类似平均度可以定义平均集聚系数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="6.497ex" height="1.686ex" role="img" focusable="false" viewBox="0 -705 2871.6 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1055.8,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(2093.6,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g></g></g></svg></mjx-container></span>。举例如下：</p><p><img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/3.png" alt="" width="408"></p></li></ul><p><strong>Remarks：</strong></p><ol type="1"><li><p>对于有向图，定义入度<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.876ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 1271.2 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></span>(某个点所在的指向自己的链接数)与出度<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="3.633ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 1605.7 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span>(某个点所在的背离自己的链接数)</p></li><li><p>允许自己与自己构成链接时，应将其算入度的计算</p></li><li><p>两个关于度的等式：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.374ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4585.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(1222.7,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(554,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2348.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3404.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(3904.2,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.058ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6655.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(1222.7,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2771.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3827.4,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(5050.1,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span></p></li></ol><h3 id="路径">路径</h3><p>节点序列成为路径，如果每两个相邻点之间都有链接。如<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="19.734ex" height="1.581ex" role="img" focusable="false" viewBox="0 -677 8722.2 699"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2055.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2833.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4111.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(4888.9,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6166.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(6944.4,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8222.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span></p><p><img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/4.png" alt="" width="158"></p><p>并将其中包含的链接数称为路径长度，如该路径的长度为5。</p><p>提出<strong>最短路径</strong>的概念，如1到3的最短路径为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="10.432ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 4611.1 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2055.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2833.3,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4111.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container></span></p><p>每两个点的最短路径长度，取其最大值称为网络的<strong>直径</strong>。</p><h3 id="二分网络和连通网络">二分网络和连通网络</h3><p>对于一个网络：</p><ul><li><p>若能将网络的节点分成两个集合，使得每个链接的两端分别取自两个集合，称为二分网络，如图：</p><p><img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/5.png" alt="" width="108"></p></li><li><p>若对于网络中的任意两个点，都有一条路径能相连，则称为连通网络，上面的例子也是一个连通网络。若不连通，则将该网络中极大的连通部分称为网络的连通分支，如（a）</p><p><img src="C:\Users\admin\Desktop\picture\picture%20for%20net%20matrix\6.png"></p><p>将（b）中的边<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2222.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(1833.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>称为桥,因为他链接了两个连通分支。</p></li></ul><h2 id="邻接矩阵">邻接矩阵</h2><p>记一个网络包含<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>个点，用一个矩阵<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="12.899ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 5701.2 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2083.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2472.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="msub" transform="translate(3619.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1388,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></g></g></svg></mjx-container></span>来对应:</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex" xmlns="http://www.w3.org/2000/svg" width="24.485ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 10822.2 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1425.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2480.8,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mstyle" transform="translate(778,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(1111.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">存</text></g><g data-mml-node="mi" transform="translate(2011.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">在</text></g><g data-mml-node="mi" transform="translate(2911.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">链</text></g><g data-mml-node="mi" transform="translate(3811.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">接</text></g><g data-mml-node="mo" transform="translate(4711.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5100.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5445.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5890.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(6302.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z"></path></g><g data-mml-node="mstyle" transform="translate(778,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(1111.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">不</text></g><g data-mml-node="mi" transform="translate(2011.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">存</text></g><g data-mml-node="mi" transform="translate(2911.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">在</text></g><g data-mml-node="mi" transform="translate(3811.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">链</text></g><g data-mml-node="mi" transform="translate(4711.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">接</text></g><g data-mml-node="mo" transform="translate(5611.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6000.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6345.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6790.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(7202.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(8341.3,0) translate(0 250)"></g></g></g></g></svg></mjx-container></span></p><p><strong>Remarks：</strong></p><ol type="1"><li><p>对于有向图，类似定义即可，逆向视为不存在链接；</p></li><li><p>有权网络中，存在链接时，将<strong>1</strong>改成对应权数即可；</p></li><li><p>在拓扑同构意义下，一个邻接矩阵对应唯一的网络；</p></li><li><p>无向图中，邻接矩阵必为对称矩阵<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.485ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 4192.4 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1416.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2472.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(3803.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>;</p></li><li><p>算法设计中，考虑到3，故往往以邻接矩阵的形式作为网络的输入。</p></li></ol><ul><li>pic 2：一些邻接矩阵的例子</li></ul><p><img title="" src="file:///C:/Users/admin/Desktop/picture/picture for net matrix/7.png" alt="" width="369"></p><p>可以这么理解：</p><table><thead><tr class="header"><th style="text-align: center;">节点</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr></tbody></table><h1 id="需要解决的算法问题">需要解决的算法问题</h1><ul><li><p>考虑到网络模型中，节点数庞大但是链接数不一定很大，故其邻接矩阵会出现大量的<strong>0</strong>，故有些算法会采用稀疏矩阵存储。</p></li><li><p>给出一个函数，输入为节点数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>和一个常数<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.43ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3726.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(780.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1725.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2003.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2503.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2948.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3448.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>，使得可以随机生成一个(无向不允许自己连自己的网络的)邻接矩阵，使得任意两个节点之间有链接的概率为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></span>，尝试用稀疏矩阵的形式存储该矩阵。【该函数主要可以用来对其它相关算法进行验证，不写也行哈】</p></li><li><p>给出一个函数，输入为一个无向网络的邻接矩阵和网络中的两个确定节点，请解决下面的问题</p><ol type="1"><li><p>确定这两个节点的最短路径长度，并任意给出一条最短路径（因为最短路径可能不止一条）</p></li><li><p>确定这两个节点之间最短路径的条数</p></li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;╮(╯▽╰)╭&lt;/p&gt;</summary>
    
    
    
    
    <category term="model" scheme="https://qioh.github.io/tags/model/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的XeLatex作业模板</title>
    <link href="https://qioh.github.io/2021/12/08/XeLatex-article-example/"/>
    <id>https://qioh.github.io/2021/12/08/XeLatex-article-example/</id>
    <published>2021-12-07T16:00:00.000Z</published>
    <updated>2022-01-12T13:34:16.218Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个简单的作业模板。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[12]{article}</span><br><span class="line">\usepackage{amsthm,amsmath,amssymb}</span><br><span class="line">\usepackage{mathrsfs}</span><br><span class="line">\usepackage{diagbox}</span><br><span class="line">\usepackage{ctex}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{geometry}</span><br><span class="line">\usepackage{fancyhdr}</span><br><span class="line">\geometry{left=3.18cm,right=3.18cm,top=2.54cm,bottom=2.54cm}</span><br><span class="line">\linespread{1.25}</span><br><span class="line">\pagestyle{fancy}</span><br><span class="line">\fancyhf{} </span><br><span class="line">\fancyhead[L]{} %页眉左</span><br><span class="line">\fancyhead[C]{} %页眉中</span><br><span class="line">\fancyhead[R]{} %页眉右</span><br><span class="line">\fancyfoot[C]{\thepage} %页码</span><br><span class="line">\usepackage{setspace}</span><br><span class="line">\usepackage{cases}</span><br><span class="line">\usepackage{multirow}</span><br><span class="line">\setstretch{1.523}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">%\footnote{}：脚注</span><br><span class="line">%\begin{tabular}：表格</span><br><span class="line">%\diagbox[dir=NW]{A}{B}</span><br><span class="line">%\multirow{n}{*}{A}</span><br><span class="line">%\multicolumn{n}{|c|}{B}</span><br><span class="line">%\hline</span><br><span class="line"></span><br><span class="line">            \leftline{\LARGE\songti\textbf{标题}}</span><br><span class="line"></span><br><span class="line">            \leftline{\large\kaishu\textbf{***\quad ***}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ~\\</span><br><span class="line"></span><br><span class="line">    \textbf{摘要:}</span><br><span class="line"></span><br><span class="line">    \textbf{关键词:}</span><br><span class="line">    ~\\</span><br><span class="line"></span><br><span class="line">    \section{}</span><br><span class="line">    \subsection{}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    \begin{thebibliography}{99}  %参考文献</span><br><span class="line">    \bibitem{ref1}</span><br><span class="line">    \bibitem{ref2}</span><br><span class="line">    \end{thebibliography}</span><br><span class="line"></span><br><span class="line">    \appendix</span><br><span class="line">    \section{附录}</span><br><span class="line"></span><br><span class="line">\end{document}</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一个简单的作业模板。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Latex" scheme="https://qioh.github.io/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://qioh.github.io/2021/08/05/python-learning/"/>
    <id>https://qioh.github.io/2021/08/05/python-learning/</id>
    <published>2021-08-04T16:00:00.000Z</published>
    <updated>2021-12-31T08:28:25.202Z</updated>
    
    <content type="html"><![CDATA[<p>这是我学习python的历程,你将见证一个拖延症晚期的人最后的自律。<br><span id="more"></span> 选用教材: 《Python编程:从入门到实践(第二版)》 (美)埃里克·马瑟斯[著] 袁国忠[译] 人民邮电出版社</p><h1 id="初识python-变量">初识python 变量</h1><h2 id="运行python">运行python</h2><p>下载python编译器(我的是3.9版本),利用cmd（命令提示符）输入python,出现<code>&gt;&gt;&gt;</code>即可使用或利用对应的软件,我使用了pycharm文本编辑器。 两个网址:</p><blockquote><p><a href="https://www.python.org/">python官网</a>:https://www.python.org/<br><a href="https://www.jetbrains.com/pycharm/">pycharm官网</a>:https://www.jetbrains.com/pycharm/</p></blockquote><p>你可以在文本编辑器pycharm内书写和运行python代码，或在命令提示符(cmd)中使用python命令: 首先转到你安装python解释器的存储盘，然后输入python并回车。若出现<code>&gt;&gt;&gt;</code>则说明在cmd中运行python成功！然后你就可以开始利用它来运行一些python命令了。[若没有出现，请检查你的python解释器是否安装成功 或 是否在当前存储盘] <figure class="highlight bash"><figcaption><span>利用cmd运行python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;D:    <span class="comment">#我安装在了D盘</span></span><br><span class="line"></span><br><span class="line">D:\&gt;python</span><br><span class="line">Python 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;    <span class="comment">#可以开始运行一些python命令了</span></span><br></pre></td></tr></table></figure> 当然你也可以直接运行python解释器，它的界面和cmd差不多，但是会具有更多功能。</p><p>开始学习python了！！！</p><h2 id="变量variable">变量(variable)</h2><h3 id="关于变量">关于变量</h3><p>变量的命名需要满足以下规则</p><blockquote><ul><li>组成:字母 数字(不能在首位) 下划线 [只有这些！！不要出现别的]</li><li>不要用到python关键字和函数名</li><li>慎用l(小写)和O(大写) [因为容易和数字1和0傻傻分不清]</li></ul></blockquote><p>变量是可以赋给值的标签。[一个形象的称呼呢]</p><h3 id="字符串变量">字符串变量</h3><p>字符串的表示,用 "" '' 均可 <figure class="highlight python"><figcaption><span>字符串的赋值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">'somthing "important"'</span></span><br></pre></td></tr></table></figure></p><blockquote><p>制表符:\t , 换行符:\n</p></blockquote><p>可以利用方法对字符串进行处理: <figure class="highlight python"><figcaption><span>字符串的一些赋值处理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">message1 = <span class="string">'aDc'</span></span><br><span class="line">message2 = <span class="string">'balance'</span></span><br><span class="line">message3 = <span class="string">' jhk '</span></span><br><span class="line"><span class="built_in">print</span>(message1.title()) <span class="comment">#首字母大写,其余全部小写</span></span><br><span class="line"><span class="built_in">print</span>(message1.upper()) <span class="comment">#全部字母大写</span></span><br><span class="line"><span class="built_in">print</span>(message1.lower()) <span class="comment">#全部字母小写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{message1}</span><span class="subst">{message2}</span>"</span>) <span class="comment">#f字符串,将字符串联结</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{message3}</span><span class="subst">{message3}</span>"</span>) <span class="comment">#用于与下面对比</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{message3.rstrip()}</span><span class="subst">{message3}</span>"</span>)<span class="comment">#删除字符串末尾所有空格（右）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(message3.lstrip())<span class="comment">#删除字符串开头所有空格（左）</span></span><br><span class="line"><span class="built_in">print</span>(message3.strip()) <span class="comment">#删除字符串开头和末尾的所有空格</span></span><br></pre></td></tr></table></figure> 上述的操作都不会更新变量本身的值,需要利用命令进行,如 <figure class="highlight python"><figcaption><span>更新字符串</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message1 = message1.title()</span><br></pre></td></tr></table></figure> 其中有两个概念:</p><ul><li>f字符串:f(format),可以在字符串中插入变量的值,python将把花括号内的变量替换为其值。</li><li>方法:python对数据执行的操作称为方法。</li></ul><p>f字符串还有其它使用的形式,例如: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">'acd'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"hello,<span class="subst">{message}</span>"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="整数与浮点数">整数与浮点数</h3><p>整数可进行基本的数的运算,** 将表示乘方运算 <figure class="highlight python"><figcaption><span>乘和乘方</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> * <span class="number">3</span> <span class="comment">#9</span></span><br><span class="line"><span class="number">3</span> ** <span class="number">3</span> <span class="comment">#27</span></span><br></pre></td></tr></table></figure> Python将所有带小数点的数称为浮点数,这代表着小数点可以出现在数的任何位置上。编程语言需要保证无论小数点出现在什么位置,数的行为是正常的。 浮点数同样可以进行基本的数的运算,但是运算结果将有有效小数位数的限制,小数位数过多将导致计算结果不精确。（这是由计算机内部表示数的方式所导致的) 整数和浮点数在计算中会产生数据类型的转变,在python中遵循以下原则:</p><ul><li>除法(/)结果必然是浮点数</li><li>所有运算中,只要操作数是浮点数,结果总是浮点数</li></ul><p>同时,在数中任意位置添加_不会影响它参与后面的使用.这样可以给数字分组,使数清晰易读。 <figure class="highlight python"><figcaption><span>_的使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10_000_000</span></span><br></pre></td></tr></table></figure> _ 的位置是任意的,1000、1_000、10_00、100_0在操作中它们的值都会视为1000。</p><h3 id="多变量赋值-常量">多变量赋值 常量</h3><p>简单的多变量赋值如下: <figure class="highlight python"><figcaption><span>多变量赋值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x,y,z = <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span> <span class="comment">#将依次赋值,x=0,y=1,z=2</span></span><br></pre></td></tr></table></figure> 关于常量,指在一个程序中永恒不变的量。python没有内置的常量类型,但我们可以将变量名字母全部大写用于标注,将其视为常量,提醒程序员在后续的操作中不得出现改变其值的命令。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT = <span class="number">5000</span></span><br></pre></td></tr></table></figure></p><h2 id="python之禅好高大上的名字由tim-peters撰写">python之禅（好高大上的名字,由Tim Peters撰写）</h2><p>是在书写优秀python代码时普遍尊重的指导原则,在解释器中运行<code>import this</code>来获得这些原则。 列举一些教材中举例的<strong>python之禅</strong></p><blockquote><ul><li>Beautiful is better than ugly.</li><li>Simple is better than complex.</li><li>Complex is better than complicated.</li><li>Readability counts.</li><li>There should be one--and preferably only one--obvious way to do it.</li><li>Now is better than never</li></ul></blockquote><p>总而言之,让你的代码尽量简单,易读(利用<code>#</code>来进行注释吧)。</p><hr><h1 id="列表">列表</h1><h2 id="创建列表">创建列表</h2><p>列表用<code>[]</code>进行创建,利用索引访问列表元素(索引从0开始)。不妨将列表名写成复数形式来提醒自己。 <figure class="highlight python"><figcaption><span>列表的创建和访问列表元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>] <span class="comment">#创建列表</span></span><br><span class="line"><span class="built_in">print</span>(alpybets)    <span class="comment">#打印列表</span></span><br><span class="line"><span class="built_in">print</span>(alpybets[<span class="number">0</span>]) <span class="comment">#利用索引访问列表元素,索引从0开始</span></span><br></pre></td></tr></table></figure> 索引可以为负数。-1代表列表最后一个元素,-2代表倒数第二个元素,依此类推。</p><h2 id="列表元素的修改添加删除弹出">列表元素的修改、添加、删除(弹出)</h2><h3 id="修改和添加">修改和添加</h3><p>列表元素的修改利用赋值语句实现: <figure class="highlight python"><figcaption><span>列表元素的修改</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]</span><br><span class="line">alpybets[<span class="number">0</span>] = <span class="string">'f'</span> <span class="comment">#更换列表第一个元素</span></span><br></pre></td></tr></table></figure> 为列表添加元素,利用方法<code>append</code>为列表末尾附加元素,方法<code>insert</code>为列表任意位置添加元素,并使该索引后的元素均后移一个位置。 <figure class="highlight python"><figcaption><span>添加元素的两种方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [] <span class="comment">#可以创建空列表</span></span><br><span class="line">alpybets.append(<span class="string">'g'</span>) <span class="comment">#为列表添加元素g</span></span><br><span class="line">alpybets.append(<span class="string">'a'</span>) <span class="comment">#为列表末尾添加元素a</span></span><br><span class="line">alpybets.insert(<span class="number">1</span>,<span class="string">'b'</span>)<span class="comment">#为列表插入元素b,位于索引1的位置上</span></span><br></pre></td></tr></table></figure> 若利用print函数打印alpybet,运行结果为 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[g,b,a]</span><br></pre></td></tr></table></figure> 列表的大小是动态的,这在使用时有着极大的便利。</p><p>最后介绍一种添加批量元素的方法:</p><blockquote><p>运算符+=:允许你在列表末尾添加另一个列表中的所有元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listings = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">listings += <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(listings)</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>运算符 += 将会有很多在末尾添加一些东西的作用,你会在后面看见它们的。</p><h3 id="删除">删除</h3><h4 id="根据索引删除列表元素">根据索引删除列表元素</h4><p>下面的两种方法可以删除指定位置(索引)的列表元素</p><ul><li>利用del语句删除元素,一旦删除某个元素,我们将无法再访问这个元素。</li></ul><figure class="highlight python"><figcaption><span>用del语句删除元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> alpybets[<span class="number">0</span>] <span class="comment">#删除列表的第一个元素</span></span><br></pre></td></tr></table></figure><ul><li>利用方法pop()删除元素,可以将被删除的元素赋给一个变量,以便再次访问它,故可以称其为弹出(pop)元素。方法pop()需要一个参数,即删除元素的索引。省略时表示弹出末尾元素,相当于pop(-1)</li></ul><figure class="highlight python"><figcaption><span>用方法pop()弹出元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">end_alpybet = alpybets.pop()    <span class="comment">#弹出列表末尾元素,并将其赋给end_alpybet</span></span><br><span class="line">first_alpybet = alpybets.pop(<span class="number">0</span>) <span class="comment">#弹出列表第一个元素,并将其赋给first_alpybet</span></span><br></pre></td></tr></table></figure><h4 id="根据值删除列表元素">根据值删除列表元素</h4><p>当你不知道所删除数据的索引,不妨利用方法remove()来删除数据,参数即所删除的字符串。当然,我们可以通过一些方法来保留所删除的数据,例如: <figure class="highlight python"><figcaption><span>利用remove删除数据</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]</span><br><span class="line">mid_alpy = <span class="string">'b'</span>       <span class="comment">#事先存储要删除的元素</span></span><br><span class="line">alpybets.remove(<span class="string">'d'</span>) <span class="comment">#这种方式无法保留删除元素d</span></span><br><span class="line">alpybets.remove(mid_alpy) <span class="comment">#也可通过变量来删除元素,被删除的元素提前放在了mid_alpy</span></span><br></pre></td></tr></table></figure> 要注意的时,remove()将只删除第一个指定的值！可以利用循环来满足我们的删除要求。</p><h2 id="组织列表">组织列表</h2><p>对列表的元素进行有规律的排序,可能会方便到我们的后续操作</p><h3 id="永久排序">永久排序</h3><p>永久排序将永远改变被排序的列表存储元素的顺序,使其无法恢复到原来的排列顺序。 <figure class="highlight python"><figcaption><span>利用方法sort()对列表永久排序,依据字母顺序排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]</span><br><span class="line">alpybets.sort()</span><br><span class="line"><span class="built_in">print</span>(alpybets)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="临时排序">临时排序</h3><p>临时排序会保留列表本身元素的顺序,同时以特定的顺序呈现它们。 <figure class="highlight python"><figcaption><span>利用函数sorted()对列表临时排序,依据字母顺序排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alpybets = [<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(alpybets))  <span class="comment">#排序</span></span><br><span class="line"><span class="built_in">print</span>(alpybets)          <span class="comment">#验证原列表的排列顺序不变</span></span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br><span class="line">[<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>]</span><br></pre></td></tr></table></figure></p><blockquote><p>对于更加复杂的排序方式(如既有大写又有小写字母),代码要复杂的多,但是了解上面的知识是基础</p></blockquote><h3 id="倒序排序方法reverse">倒序排序:方法reverse()</h3><p>方法reverse()是永久排序,它会反转列表元素的排列顺序。但是恢复原顺序也很简单,即再次反转排列顺序即可。 <figure class="highlight python"><figcaption><span>利用reverse()反转列表元素排列顺序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alpybets.reverse() <span class="comment">#反转</span></span><br><span class="line">alpybets.reverse() <span class="comment">#反转再反转,即恢复</span></span><br></pre></td></tr></table></figure> 同时.sort()和sorted()可以输入这样的参数:<code>reverse = True</code>,它们将以<strong>字母表的倒序</strong>来排列列表元素.</p><h2 id="关于列表">关于列表</h2><p>确定列表的长度(列表中含有多少元素),利用函数len()。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(alpybets)</span><br></pre></td></tr></table></figure> 在对列表操作时,要避免索引错误,即是否存在<code>差一错误</code>。目前有两个差一错误:</p><ul><li>索引从0开始,对空列表索引-1将会出错</li><li>range(1:5),打印它将会是1,2,3,4</li></ul><blockquote><p>如果我们备份一个列表,使用以下语句:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alpybets2 = alpybets</span><br></pre></td></tr></table></figure><blockquote><p>此时alpybets2将关联到alpybets所关联的列表,两个变量将会指向同一个列表。<br>在后面我们会知道应当执行下面命令:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alpybets2 = alpybets[:]</span><br></pre></td></tr></table></figure><h2 id="操作列表">操作列表</h2><p>这是对列表的高级一些的操作。</p><h3 id="for循环">for循环</h3><p>for循环的执行代码如下: <figure class="highlight python"><figcaption><span>for循环</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_alpybet = [<span class="string">'Abc'</span>,<span class="string">'Bcd'</span>,<span class="string">'Cde'</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> list_alpybet:     <span class="comment">#for语句,不要忘记冒号</span></span><br><span class="line"><span class="built_in">print</span>(element)       <span class="comment">#执行程序,循环体</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"End"</span>)             <span class="comment">#不在for循环之中了</span></span><br></pre></td></tr></table></figure> 这段代码,会从列表list的第一个元素开始,逐个运行for下面那行代码,直至遍历所有的元素。</p><ul><li>tip:不妨将列表名写作复数,将其单数形式代表元素写在for循环语句中</li></ul><p>for语句会将所有缩进的代码循环运行,对于没有缩进的代码将只运行一次。上面代码的运行结果如下: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Abc</span><br><span class="line">Bcd</span><br><span class="line">Cde</span><br><span class="line">End</span><br></pre></td></tr></table></figure> 如果我们将<code>print("End")</code>也进行缩进,则运行结果为: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Abc</span><br><span class="line">End</span><br><span class="line">Bcd</span><br><span class="line">End</span><br><span class="line">Cde</span><br><span class="line">End</span><br></pre></td></tr></table></figure> 这提示我们:不要忘记缩进,不要乱缩进</p><h3 id="数值列表">数值列表</h3><h4 id="数值列表的创建">数值列表的创建</h4><p>数值列表就是存储数的列表,可以自己输入元素,我们也可以利用一些函数来生成数值列表。 <figure class="highlight python"><figcaption><span>函数range()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure> 这里差一。再如range(1,4)将返回数字1~ 3。函数range()的语法为: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start_value,end_value,step_size)</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>函数range()可以指定步长(step size),省略则默认为1</li><li>函数range()可以省略起始值(start value),省略则起始值为0</li></ul></blockquote><p>利用返回值创建数值列表需要引进函数list() <figure class="highlight python"><figcaption><span>利用函数range()创建数值列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure> 这样就创建了一个数值列表:<code>[1,2,3,4,5]</code>。</p><h4 id="列表解析">列表解析</h4><blockquote><p>列表解析将for循环和创建新元素的代码合并成一行,并自动附加新元素。</p></blockquote><p>首先来看一个简单的例子:创建一个列表,元素为:<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="13.524ex" height="2.439ex" role="img" focusable="false" viewBox="0 -883.9 5977.7 1077.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(533,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(936.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1381.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2317.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2762.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3207.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3651.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4096.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(4541.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span> <figure class="highlight python"><figcaption><span>平方数列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">value2 = value**<span class="number">2</span></span><br><span class="line">numbers.append(value2)</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment">#用于展示</span></span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure> 而列表解析只需要一条语句就能完成上述目的: <figure class="highlight python"><figcaption><span>平方解析</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="切片">切片</h3><p>差一警告！ 假设有列表members,含有5个元素。创建切片,需要要用到的第一个元素和最后一个元素的索引。如我们需要members的前3个元素,利用下面的语句创建切片 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">members[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure> 它将返回列表索引为0,1,2的元素</p><ul><li>省略起始索引,则从列表开头开始</li><li>省略终止索引,则从起始索引开始,一直到列表末尾</li><li>省略起始和终止索引,则表示整个列表的切片</li><li>可再给予一个参数,表示步长</li></ul><p>切片的使用和列表相同,将列表名改为切片即可。</p><blockquote><p>列表的复制,不能简单的使用语句<code>copy_members = members</code>,这将导致两个变量指向同一个列表,对任意一个变量进行操作都会导致列表的改变,并没有起到复制的作用。要实现列表的复制,需要利用到切片:</p></blockquote><figure class="highlight python"><figcaption><span>复制列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy_members = members[:]</span><br></pre></td></tr></table></figure><h3 id="列表元素的一些简单统计命令">列表元素的一些简单统计命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(digits) <span class="comment">#最小值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(digits) <span class="comment">#最大值</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(digits) <span class="comment">#求和</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h2 id="元组">元组</h2><blockquote><p>python将不能修改的值称为不可变的,而不可变的列表被称为元组,其值在整个程序中不变。</p></blockquote><p>元组的创建用(),其中元素用逗号隔开,如: <figure class="highlight python"><figcaption><span>一个简单的元组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dims = (<span class="number">50</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure> 我们可以利用索引来访问对应位置的元素。元组的元素使用与列表相同,只是不能出现对某个元素值的修改。但是我们可以修改整个元组变量: <figure class="highlight python"><figcaption><span>修改元组变量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dims = (<span class="number">50</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(dims)</span><br><span class="line">dims = (<span class="number">80</span>,<span class="number">90</span>)</span><br><span class="line"><span class="built_in">print</span>(dims)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">50</span>,<span class="number">100</span>)</span><br><span class="line">(<span class="number">80</span>,<span class="number">90</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>元组是由逗号(,)标识的,括号只是为了让它清晰。如果想创建一个单元素元组,则需要如下定义:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dims = (<span class="number">100</span>,)</span><br></pre></td></tr></table></figure><h2 id="代码格式">代码格式</h2><p>大家都遵循一些代码格式的约定,将便于合作,理解对方的代码。PEP 8(Python Enhancement Proposal,PEP)向Python程序员提供了代码格式设置指南。这里同样列举几个教材中提醒的设置:</p><blockquote><ul><li>每次缩进用4个空格(设置好后即为一个Tab键),不要插入制表符</li><li>每行不超过79字符</li><li>合理使用空行,即使空行不会影响代码的运行</li></ul></blockquote><hr><h1 id="if语句">if语句</h1><h2 id="条件测试">条件测试</h2><blockquote><p>值为True或False的表达式称为<strong>条件测试</strong>(<strong>布尔表达式</strong>)。</p></blockquote><p>常用的条件测试列在下面: <figure class="highlight python"><figcaption><span>常用的条件测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a == b <span class="comment">#相等运算符,判断两边是否相等:等 = True；不等 = False</span></span><br><span class="line">a != b <span class="comment">#判断两边是否相等:等 = False；不等 = True</span></span><br><span class="line"></span><br><span class="line">a &gt; b</span><br><span class="line">a &gt;= b <span class="comment">#数值比较</span></span><br><span class="line"></span><br><span class="line">(a &gt; b) <span class="keyword">and</span> (b &gt; c) <span class="comment">#与,全部成立为True,否则为False</span></span><br><span class="line">(a &gt; b) <span class="keyword">or</span> (b &gt; c)  <span class="comment">#或,全部不成立为False,否则为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listings = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>] <span class="comment">#检查特定值是否在列表中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">in</span> listings          <span class="comment">#in</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'d'</span> <span class="keyword">in</span> listings</span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">not</span> <span class="keyword">in</span> listings      <span class="comment">#not in</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'d'</span> <span class="keyword">not</span> <span class="keyword">in</span> listings</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure> 在条件测试中使用函数和方法可以实现更近一步的测试: <figure class="highlight python"><figcaption><span>检查是否相等,忽略大小写</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name1 = <span class="string">'Ande'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name2 = <span class="string">'anDe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name1 == name2</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name1.title() == name2.title() <span class="comment">#title()可换为upper(),lower()</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p><ul><li>布尔值</li></ul><p>运行下面这段代码: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'True'</span> == <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span> </span><br></pre></td></tr></table></figure> python内可以用变量存储值<code>True</code>与<code>False</code>(没有引号,称为<strong>布尔值</strong>),通常用于记录条件 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test1 = <span class="literal">True</span></span><br><span class="line">test2 = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h2 id="if语句-1">if语句</h2><h3 id="if语句类型">if语句类型</h3><p>最简单的if语句: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Test_Conditions:</span><br><span class="line">do something</span><br></pre></td></tr></table></figure> if-else语句: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Test_Conditions:</span><br><span class="line">do something</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">do something</span><br></pre></td></tr></table></figure> if-elif-else语句: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Test_Conditions:</span><br><span class="line">do something</span><br><span class="line"><span class="keyword">elif</span> Test_Conditions:</span><br><span class="line">do something</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">do something</span><br></pre></td></tr></table></figure> if语句有下面几个要注意的地方:</p><ul><li>else均可省略,表示不运行任何代码。慎用else,因为它对应的测试条件可能<strong>包罗万象</strong></li><li>if语句会挨个测试条件,直到遇到值为True的条件。if语句<strong>只会运行其中一个代码块</strong>,其余的测试或条件为False(过往测试),或直接跳过余下测试</li><li>为测试多个条件,最好利用一系列不包括elif和else的简单if语句</li></ul><h3 id="用if语句操作列表">用if语句操作列表</h3><blockquote><p>确定列表是否为空</p></blockquote><p>可以直接将列表变量作为条件测试: <figure class="highlight python"><figcaption><span>若列表为空,输出empty;否则输出nonempty</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">listing1 = []</span><br><span class="line">listing2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">if</span> listing1:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"nonempty"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"empty"</span>)</span><br><span class="line"><span class="keyword">if</span> listing2:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"nonempty"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"empty"</span>)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty</span><br><span class="line">nonempty</span><br></pre></td></tr></table></figure></p><blockquote><p>操作多个列表</p></blockquote><p>这里主要用到<code>in</code>和<code>not in</code>操作列表元素。</p><ul><li>求解方程<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.946ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 7932 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2342.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2914.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3358.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4208.6,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(5153.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(5431.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6209.3,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(6709.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7154,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(7654,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listing1 = <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">listing2 = [value**<span class="number">3</span> <span class="keyword">for</span> value <span class="keyword">in</span> listing1]</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> listing1:</span><br><span class="line"><span class="keyword">if</span> value <span class="keyword">in</span> listing2:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"x = <span class="subst">{value}</span>"</span>)</span><br></pre></td></tr></table></figure><p>运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = -<span class="number">1</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="if语句的pep-8建议">if语句的PEP 8建议</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &lt; b: <span class="comment">#比较运算符两边各加一个空格</span></span><br></pre></td></tr></table></figure><p>要比 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&lt;b:</span><br></pre></td></tr></table></figure> 更好。</p><hr><h1 id="字典-用户输入与while循环">字典 用户输入与while循环</h1><h2 id="字典">字典</h2><h3 id="字典的创建">字典的创建</h3><p>用花括号<code>{}</code>和键值对来创建字典: <figure class="highlight python"><figcaption><span>创建字典</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien = {<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'points'</span>:<span class="number">5</span>}</span><br><span class="line">empty = {} <span class="comment">#创建空字典</span></span><br></pre></td></tr></table></figure> 访问字典中与键相关联的值,用<code>[]</code>内放入键的方式来完成: <figure class="highlight python"><figcaption><span>用键来访问关联值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_color = alien[<span class="string">'color'</span>]</span><br></pre></td></tr></table></figure> 添加键值对,类似访问的方法进行创建 <figure class="highlight python"><figcaption><span>添加键值对</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien[<span class="string">'y_position'</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure> 字典将按照顺序,在字典末尾依次添加键值对。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(alien)</span><br><span class="line">{<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'points'</span>:<span class="number">5</span>,<span class="string">'x_position'</span>:<span class="number">0</span>,<span class="string">'y_position'</span>:<span class="number">1</span> }</span><br></pre></td></tr></table></figure> 我们还可以随时修改键对应的值: <figure class="highlight python"><figcaption><span>修改键对值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien[<span class="string">'color'</span>] = <span class="string">'green'</span></span><br></pre></td></tr></table></figure> 以及删除键值对: <figure class="highlight python"><figcaption><span>删除键值对(无法再次访问)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> alien[<span class="string">'points'</span>]</span><br></pre></td></tr></table></figure> 最后,如果一个字典由类似的对象组成,我们可以采用这种格式来提高代码的可阅读性: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = {</span><br><span class="line"><span class="string">'jen'</span>:<span class="string">'python'</span>,</span><br><span class="line"><span class="string">'sarah'</span>:<span class="string">'C'</span>,</span><br><span class="line"><span class="string">'phil'</span>:<span class="string">'python'</span>,</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><blockquote><p>在最后的一个键值对后面加上一个<code>,</code>,python会忽略这个逗号,也会方便我们后续增添新的键值对。</p></blockquote><ul><li>方法get()</li></ul><p>在访问字典中的值时,若利用字典中不存在的键则会报错(KeyError): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(alien[<span class="string">'speed'</span>])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"alien_no_points.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(alien[<span class="string">'speed'</span>])</span><br><span class="line">KeyError: <span class="string">'speed'</span></span><br></pre></td></tr></table></figure> 方法get()允许当访问不存在的键时,输出一条提示语句。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>alien_speed = alien.get(<span class="string">'speed'</span>,<span class="string">'No point value'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(alien_speed)</span><br><span class="line">No point value</span><br></pre></td></tr></table></figure> 当然,若存在键值对,则正常返回键对应的值。若没有指定第二个参数,则访问不存在的键时将返回None: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>alien_speed = alien.get(<span class="string">'speed'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(alien_speed)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></p><h3 id="字典的遍历">字典的遍历</h3><h4 id="遍历键值对">遍历键值对</h4><p>利用方法<code>items()</code>来遍历字典的键值对: <figure class="highlight python"><figcaption><span>遍历键值对的for循环</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> alien.items():</span><br></pre></td></tr></table></figure> key将存放键,value存放值。</p><blockquote><p>方法items():dict_name.items()将返回一个列表,但是这个列表将不可正常访问。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>alien = {<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'points'</span>:<span class="number">5</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(alien.items())</span><br><span class="line">dict_items([(<span class="string">'color'</span>, <span class="string">'red'</span>), (<span class="string">'points'</span>, <span class="number">5</span>)])</span><br></pre></td></tr></table></figure><h4 id="遍历键">遍历键</h4><p>利用方法<code>keys()</code>来遍历字典的所有键 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> alien.keys():</span><br></pre></td></tr></table></figure> 或者撇开所有的花里胡哨: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> alien:</span><br></pre></td></tr></table></figure> 上面的代码同样可以遍历所有的键。 可以用键来访问值,如 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien = {<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'points'</span>:<span class="number">5</span>}</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> alien:</span><br><span class="line"><span class="built_in">print</span>(alien[key])</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><blockquote><p>方法keys():dict_name.keys()将返回一个由键名组成的列表,这个列表同样不可正常访问。</p></blockquote><ul><li>按特定顺序遍历字典中的键</li></ul><p>下面的for循环将按照字母表顺序遍历字典中的键: <figure class="highlight python"><figcaption><span>按字母表顺序遍历字典中的键</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(dict_name.keys()):</span><br></pre></td></tr></table></figure></p><h4 id="遍历值">遍历值</h4><p>利用方法<code>values()</code>来遍历字典的所有值: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict_name.values():</span><br></pre></td></tr></table></figure> &gt; 方法values():dict_name.values()将返回一个由值组成的列表,这个列表同样不可正常访问。</p><h4 id="集合">集合</h4><p>在遍历值时,我们想剔除重复项。此时可以利用集合<code>set</code>,利用集合可以帮我们自动剔除重复项,同时集合不会以特定的顺序存储元素。 集合利用花括号<code>{}</code>来创建,其它和列表的创建相同: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_name = {<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>}</span><br></pre></td></tr></table></figure> 我们可以利用集合,在遍历字典的值时自动剔除重复项: <figure class="highlight python"><figcaption><span>剔除字典的重复值并遍历字典的值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">set</span>(dict_name.values()):</span><br></pre></td></tr></table></figure> 此处涉及函数set(),它将返回一个集合,其元素来自参数列表且每个元素仅出现一次。</p><h3 id="嵌套">嵌套</h3><p>你可以创建:</p><ul><li>字典列表:这是一个列表,每个元素或是值,或是一个字典</li><li>在字典中存储列表:这是一个字典,每个元素或是值,或是一个列表</li><li>在字典中存储字典:这是一个字典,每个元素或是值,或是一个字典</li></ul><p>利用对应的访问元素的方法去访问吧,注意应用的时候不要混乱即可。</p><blockquote><p>列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多,很可能有更简单的解决方案。</p></blockquote><h2 id="用户输入">用户输入</h2><ul><li>字符串输入:input()</li></ul><p>函数input()接受一个参数,作为向用户显示的提示或说明: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="built_in">input</span>(<span class="string">'What is your name?: '</span>)  <span class="comment">#冒号后加个空格能够让输入更加清晰</span></span><br><span class="line">What <span class="keyword">is</span> your name?: Qioh</span><br></pre></td></tr></table></figure> 使用函数input()将输入的内容以<strong>字符串</strong>类型存储进变量中。</p><blockquote><p>运算符+=:为运算符左边字符串末尾添加运算符右边字符串。对应数值运算则为:<code>a += b</code>等价于<code>a = a + b</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'Your'</span></span><br><span class="line">word += <span class="string">'name'</span></span><br><span class="line"><span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure><ul><li>数值输入:int()与float()</li></ul><p>若想输入数值,首先用input()接受数字,然后利用函数int()或float()将数的字符串表示转变为数值表示。 <figure class="highlight python"><figcaption><span>函数int()与float()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="built_in">input</span>(<span class="string">'your age?: '</span>)</span><br><span class="line">your age?: <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="string">'20'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age1 = <span class="built_in">int</span>(age)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age2 = <span class="built_in">float</span>(age)</span><br><span class="line"><span class="number">20.0</span></span><br></pre></td></tr></table></figure> 使用函数int()和float()将输入的内容以<strong>数值</strong>类型存储进变量中。(数值表示)<br>两者的区别在于:<br>int()将返回整数,若参数为小数则会报错<br>float()将返回浮点数,无论参数是整数还是小数,整数则会转化为小数表示(小数位为0)<br></p><p>当然,可以将数值格式转变为字符串格式:<strong>函数str()</strong></p><blockquote><p>求模运算符:求模运算符<code>%</code>将两个整数相除,并返回余数。</p></blockquote><figure class="highlight python"><figcaption><span>%的使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> % <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> % <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>求模运算符有两个作用: 判断一个整数是否是某个数的整数倍: <figure class="highlight python"><figcaption><span>判断一个数是否是偶数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">input</span>(<span class="string">'input an interge: '</span>)</span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Even'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Odd'</span>) </span><br></pre></td></tr></table></figure> 控制用户输入整数或者随机整数的范围: <figure class="highlight python"><figcaption><span>取用户输入数模5的结果,并输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="built_in">input</span>(<span class="string">'input an interge,and we will take the result modulo 5: '</span>)</span><br><span class="line"><span class="built_in">input</span> an interge,<span class="keyword">and</span> we will take the result modulo <span class="number">5</span>: <span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="built_in">int</span>(number) % <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="while循环">while循环</h2><p>在前面,我们利用for循环遍历列表与字典。while循环拥有更广泛的用法,能够实现我们更多的需求。</p><h3 id="编写while循环">编写while循环</h3><p>while循环的语法如下: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> test_condition:</span><br><span class="line">do something</span><br></pre></td></tr></table></figure> <code>test_condition</code>为<strong>条件测试</strong>,当值为True时执行循环,并在执行完循环体后再次进行条件测试,当值为False时退出循环。</p><h3 id="break语句与continue语句">break语句与continue语句</h3><ul><li>break语句运行时将立即退出当前循环</li><li>continue语句运行时将跳过剩下的循环体语句,返回到while的条件测试</li></ul><h3 id="设置退出条件">设置退出条件</h3><p>循环需要一个退出条件,不要编写无限循环(若产生无限循环,可以利用快捷键CTRL+C停止循环或直接关闭运行窗口) 下面举例说明几个常用的退出条件的设置:</p><ul><li><p>让用户选择何时退出 下面的一段代码列出了一个简单的例子: <figure class="highlight python"><figcaption><span>输入姓名,并输出一条问候语。直到用户输入'quit'时结束程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">'Tell me the name,and I will greet you!'</span></span><br><span class="line">prompt += <span class="string">'Enter "quit" to end the program: '</span>  <span class="comment">#这是一种用于输入较长字符串的有效方式</span></span><br><span class="line">name = <span class="string">''</span>  <span class="comment">#提前定义变量name</span></span><br><span class="line"><span class="keyword">while</span> name != <span class="string">'quit'</span>:</span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">'quit'</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Hello,<span class="subst">{name}</span>!"</span>)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tell me the name,<span class="keyword">and</span> I will greet you!Enter <span class="string">"quit"</span> to end the program: Q</span><br><span class="line">Hello,Q!</span><br><span class="line">Tell me the name,<span class="keyword">and</span> I will greet you!Enter <span class="string">"quit"</span> to end the program: L</span><br><span class="line">Hello,L!</span><br><span class="line">Tell me the name,<span class="keyword">and</span> I will greet you!Enter <span class="string">"quit"</span> to end the program: F</span><br><span class="line">Hello,F!</span><br><span class="line">Tell me the name,<span class="keyword">and</span> I will greet you!Enter <span class="string">"quit"</span> to end the program: quit</span><br></pre></td></tr></table></figure> 当用户输入'quit'时结束程序。</p></li><li><p>使用标志(flag)</p></li></ul><p>利用布尔值(True,False)来创建循环是个不错的选择。定义变量flag,先赋值True,并将flag的值更改为False当需要退出循环时。 我们来改写上面的那个例子: <figure class="highlight python"><figcaption><span>输入姓名,并输出一条问候语。直到用户输入'quit'时结束程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">'Tell me the name,and I will greet you!'</span></span><br><span class="line">prompt += <span class="string">'Enter "quit" to end the program: '</span>  </span><br><span class="line">flag = <span class="literal">True</span> <span class="comment">#设定标志</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">'quit'</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Hello,<span class="subst">{name}</span>!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure> 使用标志,将退出条件放在同一个地方,有利于增强程序的可读性,在程序纠错时也更加容易发现。</p><ul><li>利用break语句</li></ul><p>你可以写一个永真循环,在适合的地方利用break语句退出循环。如我们再次改写上述循环: <figure class="highlight python"><figcaption><span>输入姓名,并输出一条问候语。直到用户输入'quit'时结束程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">'Tell me the name,and I will greet you!'</span></span><br><span class="line">prompt += <span class="string">'Enter "quit" to end the program: '</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="keyword">if</span> name != <span class="string">'quit'</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Hello,<span class="subst">{name}</span>!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure> 使用标志的想法与之类似。 当然,我们可以利用break语句增加结束循环的条件,如果你懒得去改while的条件测试或者想跳过一些循环内容: <figure class="highlight python"><figcaption><span>从1开始,输出第三个既能整除3又能整除5的整数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line">flag = <span class="number">0</span>  <span class="comment">#设立标志,表示第几个满足条件的整数</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">and</span> (number % <span class="number">5</span> == <span class="number">0</span>):</span><br><span class="line">flag = flag + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">3</span>:  <span class="comment">#标志着第几个满足条件的整数</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">number = number + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure></p><blockquote><p>continue语句不能退出循环,但是它有自己的作用</p></blockquote><figure class="highlight python"><figcaption><span>从1开始,输出第二个能整除9,但为奇数的整数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">0</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> number = number + <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment">#为偶数时,直接跳过下面的循环语句重新进入循环</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"> <span class="keyword">if</span> number % <span class="number">9</span> == <span class="number">0</span>:</span><br><span class="line">  flag = flag + <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> flag == <span class="number">2</span>:</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><p>三种方式各有其用,但是也要注意细节。比如在第一个例子中我们需要提前定义name,但在后面的代码中就无需提前定义name。没有为变量提前分配存储空间将导致程序出现我们意想不到的错误和结果。</p><h3 id="利用while语句处理字典与列表">利用while语句处理字典与列表</h3><p>在这里我们来处理一些以前的遗留问题。</p><ul><li>将一个列表(字典)中的元素按某种约定转移到另外一个列表(字典)中</li></ul><figure class="highlight python"><figcaption><span>将一个列表中的元素倒序存储到另外一个列表中</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listings1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">listings2 = []</span><br><span class="line">k = <span class="built_in">len</span>(listings1) - <span class="number">1</span></span><br><span class="line">h = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> k != -<span class="number">1</span>:</span><br><span class="line">listings2.append(listings1[k])</span><br><span class="line">k = k - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(listings1)     <span class="comment">#验证结果</span></span><br><span class="line">listings1.reverse()</span><br><span class="line"><span class="built_in">print</span>(listings1)</span><br><span class="line"><span class="built_in">print</span>(listings2)</span><br></pre></td></tr></table></figure><p>运行结果 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure></p><p>tips: 方法reverse()没有返回值！</p><ul><li>删除所有的特定值</li></ul><p>我们曾经用函数remove()来删除特定值,但是它只会删除第一个出现的特定值。现在我们可以来删除所有特定的元素: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listings = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">'a'</span> <span class="keyword">in</span> listings:</span><br><span class="line">  listings.remove(<span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">print</span>(listings)</span><br></pre></td></tr></table></figure> 注意循环语句: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="string">'a'</span> <span class="keyword">in</span> listings:</span><br></pre></td></tr></table></figure> 它将挨个访问列表listings中的特定值<code>a</code>。</p><ul><li>让用户填充列表和字典</li></ul><p>我们可以定义一个空列表或空字典,通过while循环来让用户输入,并设置退出条件结束输入。 <figure class="highlight python"><figcaption><span>列表的用户输入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listings = [] <span class="comment">#建立空列表</span></span><br><span class="line">prompt = <span class="string">'please input,'</span></span><br><span class="line">prompt += <span class="string">'enter "quit" to end it: '</span> <span class="comment">#设置提示输入语句</span></span><br><span class="line">flag = <span class="literal">True</span>  <span class="comment">#设置标志</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">message = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="keyword">if</span> message != <span class="string">'quit'</span>:</span><br><span class="line">listings.append(message)    <span class="comment">#为列表添加元素</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag = <span class="literal">False</span>                <span class="comment">#设置结束循环的条件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(listings)</span><br></pre></td></tr></table></figure> <figure class="highlight python"><figcaption><span>字典的用户输入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = {}  <span class="comment">#建立空字典</span></span><br><span class="line">flag = <span class="literal">True</span>  <span class="comment">#设置标志</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">'input key: '</span>)</span><br><span class="line">value = <span class="built_in">input</span>(<span class="string">'input value for key: '</span>)  <span class="comment">#依次输入键值对</span></span><br><span class="line"><span class="built_in">dict</span>[key] = value                       <span class="comment">#将键值对存储进字典中</span></span><br><span class="line">repeat =<span class="built_in">input</span>(<span class="string">'Would you like to continue？(yes/no): '</span>)  <span class="comment">#询问用户继续或者退出</span></span><br><span class="line"><span class="keyword">if</span> repeat == <span class="string">'no'</span>:</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure></p><hr><h1 id="函数与模块">函数与模块</h1><blockquote><p>函数是带名字的代码块,用于完成具体的工作。</p></blockquote><h2 id="函数">函数</h2><h3 id="定义函数">定义函数</h3><ul><li>简单的函数定义</li></ul><p>定义函数的语法如下: <figure class="highlight python"><figcaption><span>定义函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span>(<span class="params">Forp1,Forp2,...</span>):</span></span><br><span class="line"><span class="string">"""文档字符串"""</span></span><br><span class="line">do something</span><br></pre></td></tr></table></figure> 用三个双引号(""")括起函数的<strong>文档字符串(doc string)</strong>,可以用来描述函数的作用。</p><p>这里有两个概念:形参和实参</p><ul><li>形参(formal parameters):函数完成工作所需的参数。</li><li>实参(actual parameters):调用函数时,将要让函数使用的参数。</li></ul><p>在定义函数时,Forp1,Forp2这些参数代表形参,它将在函数的定义中起作用。调用函数时,向函数提供参数,它们将完成具体的任务,称为实参。</p><ul><li>传递任意数量的实参</li></ul><p>函数定义时,有可能遇到无法确定实参数量的情况。下面的方式将允许你定义的函数能够传递任意数量的实参: <figure class="highlight python"><figcaption><span>传递任意数量的实参</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span>(<span class="params">*<span class="type">Tuple</span></span>):</span></span><br><span class="line">do something</span><br></pre></td></tr></table></figure> 在这里定义的形参名<code>*Tuple</code>将创建一个名为Tuple的空元组,将所有接收到的值都存储到这个元组中。可以通过循环来操作这个元组。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">names</span>(<span class="params">*name_T</span>):</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_T:</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">name(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure> 这种实参将收集任意数量的位置实参。(依照输入实参的顺序存储进元组)</p><ul><li>使用任意数量的关键字实参</li></ul><p>可以使函数编写成能够接受任意数量的键值对: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span>(<span class="params">**dict_name</span>)</span></span><br></pre></td></tr></table></figure> <code>**dict_name</code>将创建一个字典,可以容纳任意数量的键值对,将按照实参的输入顺序依次添加进字典中。 实参输入时,形式如下,它和字典的常用表达形式有点不同: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function_name(key1=value1,key2=value2,...) </span><br><span class="line"><span class="comment">#key为变量,将被存储成键,不需要加引号</span></span><br><span class="line"><span class="comment">#value为值,将被存储成值,必要时需要加引号</span></span><br></pre></td></tr></table></figure> 这种实参将收集任意数量的关键字实参。</p><h3 id="传递实参">传递实参</h3><h4 id="函数读取实参的过程">函数读取实参的过程</h4><ul><li>位置实参</li></ul><p>函数读取参数的过程中,需要关联实参和形参。最简单的关联方式是基于实参的顺序。这种关联方式称为<strong>位置实参</strong>。 当利用位置实参调用函数时,要注意输入实参的顺序,否则就会出现无法预料的结果。 举个栗子,如我们之前使用的函数range().函数range()的前两个参数为起始数和终止数。如果我们将位置调换并赋给一个列表,就会返回一个空列表: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>listings = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">8</span>,<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(listings)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><ul><li>关键字实参</li></ul><p>当你熟知一个函数的所有形参名时,我们可以利用<strong>关键字实参</strong>来关联实参和形参。 <strong>关键字实参</strong>是传递给函数的名称值对。关键字实参允许你随意排列实参的顺序,因为python会识别并让每个实参关联到正确的形参。 例如我们来写一个函数range_new(),并利用关键字实参来调用这个我们新编的函数: <figure class="highlight python"><figcaption><span>利用函数range(),编写一个函数range_new()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">range_new</span>(<span class="params">start_value,end_value</span>):</span></span><br><span class="line">listings = <span class="built_in">list</span>(<span class="built_in">range</span>(start_value,end_value))</span><br><span class="line"><span class="keyword">return</span> listings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面调用这个函数,利用关键字实参的方式</span></span><br><span class="line">listings2 = <span class="built_in">list</span>(range_new(end_value=<span class="number">8</span>,start_value=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(listings2)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure> 即使我们调换了参数输入的数据,由于我们使用了关键字实参,让程序也顺利的达成我们的预期结果了。函数中的return会在后面介绍。 <strong>注意</strong>:使用关键字实参时,务必准确指定函数定义中的形参名。</p><ul><li>默认值</li></ul><p>编写函数时,可以给每个形参指定默认值。在调用时,提供了默认值的形参,在调用函数时可以不给这个形参提供实参。若提供了实参,则使用用户提供的实参,否则将使用默认值。使用默认值可以简化函数的调用,不必在调用时输入所有参数。 在前面的学习中,很多的函数都设置了默认值,如函数range()第三个参数默认值为1(步长)。 默认值的定义如下: <figure class="highlight python"><figcaption><span>设置默认值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span>(<span class="params">Forp1,Forp2=value1,...</span>):</span></span><br><span class="line">do something</span><br></pre></td></tr></table></figure> 举个例子,用上面刚刚编写的函数: <figure class="highlight python"><figcaption><span>默认终止值定为11</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">range_new</span>(<span class="params">start_value,end_value=<span class="number">11</span></span>):</span></span><br><span class="line">listings = <span class="built_in">list</span>(<span class="built_in">range</span>(start_value,end_value))</span><br><span class="line"><span class="keyword">return</span> listings</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(range_new(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(range_new(<span class="number">1</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure> 定义默认值后,函数默认还是采用<strong>位置实参</strong>,所以在定义函数时,必须先在形参列表中列出没有默认值的形参,再列出有默认值的实参。防止输入实参时产生混乱。</p><blockquote><p>值<strong>None</strong>:设置默认值时,可以设置值None。它表示没有任何内容,且在条件测试中将视为False。</p></blockquote><p>使用默认值可以让实参变成可选的,编写函数时要注意这一点。</p><ul><li>形参读取实参</li></ul><p>形参不会定义类型,形参的数据类型可以在函数体中表现,但是在读取实参时不会考虑这一点。只需在形参列表中列出形参名即可,它们能够储存绝大部分常用的数据类型和数据结构,如数值,字符串,字典与列表。但是要根据函数的编写,形参需要有对应的形式,否则在使用时就会产生意想不到的结果。</p><ul><li>形参表的顺序</li></ul><p>形参的设置可以设置成很多类型,一个函数的形参表可以包含不同类型的形参。但是根据每种类型的特点,形参表的顺序需要规定,才能让输入实参时不会产生麻烦和问题。一个基本的顺序是:</p><blockquote><p>普通形参、有默认值的形参、形成元组或字典的形参(<code>*</code>和<code>**</code>)</p></blockquote><p>至此,函数的头部定义常用的方法已经全部介绍了,使用自己最容易理解的方式去定义函数的头部即可。</p><h4 id="函数的返回值">函数的返回值</h4><p>函数可以返回任意类型的值。 在函数的结尾处,用以下语句去返回在函数体中存在的变量吧: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> value</span><br></pre></td></tr></table></figure></p><blockquote><p>即使没有定义返回值,函数会默认返回值<code>None</code></p></blockquote><h2 id="将函数存储在模块中">将函数存储在模块中</h2><p>使用函数的优点之一是可将代码块与主程序分离。可以将函数存储在称为<strong>模块</strong>的独立文件中,再将模块导入到主程序中。</p><blockquote><p>模块:扩展名为.py的文件,包含要导入到程序中的代码。</p></blockquote><p>假设我们创建了一个名为Module.py的模块,其中包含函数function_i(i=1,2,...) 下面我们来介绍如何导入模块中的函数。注意,模块要与将其导入的文件需要在同一个目录(文件夹)下。</p><ul><li>导入整个模块</li></ul><p>用下面的语句导入模块中的所有函数: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Module</span><br></pre></td></tr></table></figure> 使用句点表示法来调用模块Module.py中的函数: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module.function_1()  </span><br></pre></td></tr></table></figure> 可以使用关键字as给模块指定别名: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Module <span class="keyword">as</span> M</span><br></pre></td></tr></table></figure> 则可以利用别名和句点表示法调用模块中的函数: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M.function_1()  </span><br></pre></td></tr></table></figure></p><ul><li>导入特定的函数,并重新命名</li></ul><p>用下面的语句导入模块中我们需要的任意数量的函数: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> function_1,function_2  <span class="comment">#用逗号分隔函数名</span></span><br></pre></td></tr></table></figure> 同时可以用关键字as给导入模块的函数指定别名: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> function_1 <span class="keyword">as</span> f1</span><br></pre></td></tr></table></figure> 这样可以避免与当前程序命名上的冲突。 调用函数直接使用函数名即可,若有别名则用新的函数名调用函数。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function_1()</span><br><span class="line">f1() <span class="comment">#重命名为f1后可以这样使用</span></span><br></pre></td></tr></table></figure></p><ul><li>导入模块中的所有函数</li></ul><p>使用<code>*</code>(星号运算符)可以导入模块中的所有函数: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure> 此时在调用函数时无须使用句点表示法,直接调用即可。 导入整个模块和模块中的所有函数是不同的。导入整个模块,虽然在调用函数时较为麻烦,但是不容易出现重名和覆盖函数的问题。教材中推荐的一种做法是:</p><blockquote><p>要么只导入需要使用的函数,要么导入整个模块并使用句点表示法。</p></blockquote><p>这让代码更清晰,更容易阅读和理解。</p><h2 id="函数编写指南">函数编写指南</h2><p>这里列举几个教材上的编写指南:</p><ul><li>应给函数指定描述性名称,且只在其中使用小写字母和下划线。给模块命名时也应遵循上述约定</li><li>每个函数都应包含简要地阐述其功能的注释。该注释应紧跟在函数定义后面,并采用文档字符串格式</li><li>给形参指定默认值时,等号两边不要有空格。对于函数调用中的关键字实参,也应遵循这种约定</li><li>如果形参很多,导致函数定义的长度超过了79字符,可在函数定义中输入左括号后按回车键,并在下一行按两次Tab键,从而将形参列表和只缩进一层的函数体区分开来 (/)</li><li>如果程序或模块包含多个函数,可使用两个空行将相邻的函数分开</li><li>所有import语句都应放在文件开头。唯一例外的情形是,在文件开头使用了注释来描述整个程序</li></ul><figure class="highlight python"><figcaption><span>(/)的举例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">parameter_0, parameter_1, parameter_2,</span></span></span><br><span class="line"><span class="params"><span class="function">parameter_3, parameter_4, parameter_5</span>):</span></span><br><span class="line">function body...</span><br></pre></td></tr></table></figure><p>编写函数具有众多的优点,也让一个问题的解决步骤化,模块化,更加清晰。程序修改、测试与维护也因函数的使用变得方便,清晰明了。</p><hr><h1 id="类">类</h1><p>这应该是比较复杂的数据结构了。。。让我们开始吧。<br>面向对象编程中,我们将编写<strong>类</strong>来创建对象。</p><blockquote><p>根据类来创建对象称为实例化</p></blockquote><h2 id="创建类">创建类</h2><p>用下面的代码创建类: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line"><span class="string">"""doc string"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化属性prop1,prop2"""</span></span><br><span class="line">self.prop1 = prop1</span><br><span class="line">self.prop2 = prop2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method1</span>(<span class="params">self,formp1</span>):</span></span><br><span class="line"><span class="string">"""doc string"""</span></span><br><span class="line">do something</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method2</span>(<span class="params">self,formp2</span>):</span></span><br><span class="line"><span class="string">"""doc string"""</span></span><br><span class="line">do something</span><br></pre></td></tr></table></figure> 下面来解释几个概念:</p><ul><li>方法</li></ul><blockquote><p>方法:类中的函数称为方法</p></blockquote><p>上面的定义中,<strong>init</strong>(),method1(),method2()即是这个类中的方法。<br>方法的形参表中,第一个形参必须为<code>self</code>,后面为方法需要用到的其它形参。</p><ul><li>方法__init__()</li></ul><p>方法__init__()需要几个形参,其中第一个形参<code>self</code>必不可少,且必须作为第一个形参。python会自动调用这个方法来创建实例,并自动传入实参self。每个与实例相关联的方法调用都自动传递实参self,它是一个指向实例本身的引用,<strong>让实例能够访问类中的属性和方法</strong>。 当创建Object类时,只需给除第一个以外的形参赋值即可。</p><ul><li>变量self.prop1</li></ul><p>在类中,以self为前缀的变量可以供类中的方法使用。通过语句<code>self.prop1 = prop1</code>将获取形参prop1相关联的值。在类中,后面使用这些变量需要带上前缀self和句点。</p><blockquote><p>可通过实例访问的变量称为<strong>属性</strong></p></blockquote><p>对于方法__init__()的作用,可以重新表述为:创建属性,并接受实参的值,将值赋给它所创建的属性。</p><h2 id="根据类创建实例">根据类创建实例</h2><p>当创建类后,可以根据类创建实例: <figure class="highlight python"><figcaption><span>实例的创建</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line">my_object = Object(value1.value2) <span class="comment">#创建实例 </span></span><br><span class="line">my_object_1 = Object(value3.value4) <span class="comment">#我们可以根据需要创建多个实例 </span></span><br></pre></td></tr></table></figure> 创建实例后,我们可以访问属性,调用方法: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(my_object.value1)   #利用句点表示法访问属性</span><br><span class="line">my_object.method1(formp1)  #利用句点表示法调用方法</span><br></pre></td></tr></table></figure> 每一个实例都将存储在一个变量中,这个变量可以单独放置,也可以存放在列表和字典中。</p><h2 id="使用类和实例">使用类和实例</h2><p>我们利用Object类来举例:</p><h3 id="给属性指定默认值">给属性指定默认值</h3><p>在方法__init__()的中设置默认值。默认值无需出现在形参表中,因为后面有办法来访问和修改它: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化属性prop1,prop2"""</span></span><br><span class="line">self.prop1 = prop1</span><br><span class="line">self.prop2 = prop2</span><br><span class="line">self.prop3 = Defaults_constant  <span class="comment">#设置你需要的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_prop</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">"""打印各个属性"""</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"prop1 = <span class="subst">{self.prop1}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"prop2 = <span class="subst">{self.prop2}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"prop3 = <span class="subst">{self.prop3}</span>"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="修改属性的值">修改属性的值</h3><ul><li>直接修改</li></ul><p>直接修改,就是通过访问这个属性的方式来改变其值: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line">my_object = Object(value1.value2) <span class="comment">#创建实例</span></span><br><span class="line">my_object.read_prop()</span><br><span class="line">my_object.prop3 = new_value  <span class="comment">#访问并修改属性的值</span></span><br><span class="line">my_object.read_prop()</span><br></pre></td></tr></table></figure></p><ul><li>通过方法修改</li></ul><p>可以定义一个方法来修改: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">renew_prop3</span>(<span class="params">self,propr</span>):</span></span><br><span class="line"><span class="string">"""定义更新属性的方法"""</span></span><br><span class="line">self.prop3 = propr</span><br><span class="line"></span><br><span class="line">my_object = Object(value1,value2)</span><br><span class="line">my_object.renew_prop3(new_value)  <span class="comment">#利用方法修改属性的值</span></span><br></pre></td></tr></table></figure> 还有一些有趣的应用:<br>假如我们想更新一个数值类型的属性,保证它的每次修改只能修改为更大的数值,不能减少。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">renew_prop3</span>(<span class="params">self,propr</span>):</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">定义更新属性的方法。</span></span><br><span class="line"><span class="string">禁止属性对应数值的下降,</span></span><br><span class="line"><span class="string">并在用户尝试输入较小数值时输出一条提示信息。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> propr &gt;= self.prop3:</span><br><span class="line">self.prop3 = propr</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"You should enter a larger value!"</span>)</span><br></pre></td></tr></table></figure></p><ul><li>对属性的值进行递增</li></ul><p>修改属性的值,还可用通过运算符来实现,本质仍是定义一个方法来修改属性的值。<br>举个栗子: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">renew_prop3</span>(<span class="params">self,propr</span>):</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">定义更新属性的方法。</span></span><br><span class="line"><span class="string">禁止属性对应数值的下降,</span></span><br><span class="line"><span class="string">并在用户尝试输入较小数值时输出一条提示信息。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> propr &gt;= <span class="number">0</span>:</span><br><span class="line">self.prop3 += propr</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"You should enter a Non-negative number!"</span>)</span><br></pre></td></tr></table></figure> tips:进行这样的处理,在调用方法时可以避免属性对应数值的下降。但是我们仍然可以利用直接访问属性的方式修改成任意值。如果要严格做到这个要求,还需要在其它的地方进行更改和限制。</p><h2 id="继承">继承</h2><p>现在来讲类的继承。<br>在前面我们定义一个类Object。现在我们想定义一个新类Sub_object,这个类具有Object中的属性与方法,但是又有独属于自己的特有属性和方法。<br>不妨将类Object称为父类,这个新类Sub_object称为子类。下面我们来介绍子类如何继承父类的属性和方法。</p><h3 id="子类继承父类的属性和方法">子类继承父类的属性和方法</h3><p>子类需要调用父类的方法__init__(),这将初始化父类的方法__init__()中定义的属性,并让子类包含这些属性。 利用下面的代码调用父类的方法: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_object</span>(<span class="params">Object</span>):</span></span><br><span class="line"><span class="string">"""创建子类Sub_object"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化父类的属性"""</span></span><br><span class="line"><span class="built_in">super</span>().__init__(prop1,prop2)</span><br></pre></td></tr></table></figure></p><ol type="1"><li>创建子类,父类必须在当前文件(或从模块中导入),且位于子类前面。在定义子类时,圆括号内需要指定父类的名称,其下定义的方法__init__()接受创建父类实例所需要的信息(属性)。</li><li>特殊函数super()允许你调用父类的方法。</li><li>语句<code>super().__init__(prop1,prop2)</code>会调用父类的方法__init__(),让子类Sub_object包含这个方法中定义的所有属性。[父类又称为超类(superclass)]</li></ol><p>至此,子类Sub_object继承了父类Object的属性和方法。</p><p>下面我们来创建子类独有的属性和方法。</p><h3 id="创建子类独有的属性和方法">创建子类独有的属性和方法</h3><p>可以通过设置默认值的方法来定义新的属性,在子类下面的缩进块中可以定义新的方法。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_object</span>(<span class="params">Object</span>):</span></span><br><span class="line"><span class="string">"""创建子类Sub_object"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化父类的属性"""</span></span><br><span class="line"><span class="built_in">super</span>().__init__(prop1,prop2)</span><br><span class="line"><span class="comment">#创建新的属性。定义可以根据需求定义默认值,若没有需求不妨定义为值None</span></span><br><span class="line">prop_sub = <span class="literal">None</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_method</span>(<span class="params">self,propr</span>)  #创建新的方法</span></span><br><span class="line"><span class="function">"""<span class="title">doc</span> <span class="title">string</span>"""</span></span><br><span class="line"><span class="function"><span class="title">do</span> <span class="title">something</span></span></span><br></pre></td></tr></table></figure></p><h3 id="重写父类的方法">重写父类的方法</h3><p>上面我们让子类继承了父类的所有方法。若父类的方法不符合子类模拟的实物的行为,我们可以进行重写。下面我们来重写Object类中的函数method1(): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_object</span>(<span class="params">Object</span>):</span></span><br><span class="line"><span class="string">"""创建子类Sub_object"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化父类的属性"""</span></span><br><span class="line"><span class="built_in">super</span>().__init__(prop1,prop2) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method1</span>(<span class="params">self,formp3</span>):</span>  <span class="comment">#重写时,采用父类的函数名</span></span><br><span class="line"><span class="string">"""doc string"""</span></span><br><span class="line">do other things</span><br></pre></td></tr></table></figure> 则若创建了Sub_object类的实例,用该实例调用方法method1()时,python会忽略父类的method1(),转而调用子类Sub_object的方法method1()。<br>新旧属性,重写和新写的方法,它们直接利用简单的句点表示法使用就好,没有什么特殊的调用格式。即父类怎么调用和访问,子类就怎么调用和访问。</p><p>教材对<strong>继承</strong>的评价是这样的:</p><blockquote><p>使用继承时,可让子类保留从父类那里继承而来的精华,并剔除不需要的糟粕。</p></blockquote><h3 id="将实例用作属性">将实例用作属性</h3><p>我们可以定义一个类,它将可以作为前面所定义的类的属性。<br>下面我们定义一个新的类Other_object,它位于Object类之后,且没有继承任何的类(作为一个独立的类): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other_object</span>:</span></span><br><span class="line"><span class="string">"""定义一个新的类"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init</span>(<span class="params">self,prop_t = some_value</span>):</span></span><br><span class="line"><span class="string">"""初始话这个新类的属性,并指定一个默认值"""</span></span><br><span class="line">self.prop_t = prop_t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">other_method</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">"""定义一个Other_object类的方法"""</span></span><br><span class="line">do something</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_object</span>(<span class="params">Object</span>):</span></span><br><span class="line"><span class="string">"""创建子类Sub_object"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,prop1,prop2</span>):</span></span><br><span class="line"><span class="string">"""初始化父类的属性"""</span></span><br><span class="line"><span class="built_in">super</span>().__init__(prop1,prop2) </span><br><span class="line">self.other_object = Other_object()  <span class="comment">#你可以传递所需要的实参</span></span><br></pre></td></tr></table></figure> <code>self.other_object = Other_object()</code>允许你在创建一个Sub_object类时,将模拟一个实例(Other_object类),并将其存储进一个属性中,这个属性属于Sub_object类所创建的实例。<br>下面的<strong>句点表示法</strong>帮助你访问该属性存储实例 的属性(好绕(╯▽╰)),以及调用Other_object中的方法: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_sub_object = Sub_object(value1,value2) </span><br><span class="line"><span class="comment">#根据Sub_object创建一个实例</span></span><br><span class="line"><span class="built_in">print</span>(my_sub_object.other_object.prop_t)  <span class="comment">#访问属性prop_t</span></span><br><span class="line">my_sub_object.other_object.other_method() <span class="comment">#调用方法other_method()</span></span><br></pre></td></tr></table></figure> 尝试去创建合适的类去模拟一个真正的实物吧。属性表达实物的固有特征,方法表示实物的行为。</p><h3 id="类与模块">类与模块</h3><p>python允许将类存储在模块中,并利用import等语句将这些类导入其它文件中。<br>下面我们利用上面定义过的类来举例:Object类、Sub_object类、Other_object类。它们被放在一个名为Module.py的模块文件中。</p><ul><li>关于模块存储类</li></ul><p>可以在一个模块中存储任意数量的类。但我们希望同一个模块中的类之间应该存在某种相关性,如父类和它的子类就应存放在同一个模块中。</p><ul><li>导入单个类</li></ul><p>导入一个类,用<code>from...import...</code>即可: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form Module <span class="keyword">import</span> Object</span><br></pre></td></tr></table></figure></p><ul><li>导入多个类</li></ul><p>用逗号隔开需要导入类的名称吧: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form Module <span class="keyword">import</span> Object,Sub_object,Other_object</span><br></pre></td></tr></table></figure></p><ul><li>导入整个模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Module</span><br></pre></td></tr></table></figure><p>这段代码将导入模块中的所有类与所有函数。当调用类和函数时,需要利用到句点表示法。 <figure class="highlight python"><figcaption><span>使用模块中的类,当导入整个模块时</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_object = Module.Object(value1,value2)</span><br><span class="line">my_other_object = Module.Other_object()</span><br></pre></td></tr></table></figure> 这是唯一需要用到句点表示法的导入形式,其它导入方法无需使用句点,直接使用类名即可。</p><ul><li><p>导入模块中的所有类 用下面的语句导入模块中的所有类: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure> 同函数模块的导入,不推荐使用,防止意想不到、难以诊断的错误（重名与覆盖）。</p></li><li><p>将一个模块导入另一个模块</p></li></ul><p>上面介绍的方法都同样可以将一个模块导入另外一个模块。<br>如若父类代码过多,想在另外一个文件中创建其子类,则可以将包含父类的模块导入到准备创建子类的模块中去。注意,<strong>要先导入父类后,才能创建子类</strong>,导入模块的语句应放在创建子类的代码块之前！ <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> Object</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_object</span>(<span class="params">Object</span>):</span></span><br><span class="line">--snip--</span><br></pre></td></tr></table></figure></p><ul><li>使用别名</li></ul><p>可以为模块导入的类指定一个别名,利用关键字as来实现: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Module <span class="keyword">import</span> Object <span class="keyword">as</span> Oj</span><br><span class="line"></span><br><span class="line">my_object = Oj(value1,value2)  <span class="comment">#使用别名</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义工作流程">自定义工作流程</h2><p>先写模块,再写主程序,还是反过来的代码组织方式都将由你决定。选择你最喜欢的方式,也请熟悉python中的选项,这样你才能确定哪种项目组织方式是最佳的,并能理解别人开发的项目。在最后,请回顾你写的代码,并做出改进。</p><p>至此,python基础知识中的数据类型和数据结构就已经全部展示了。下面是python对于文件与测试的相关阐述。</p><hr><h1 id="文件-异常-测试">文件 异常 测试</h1><h2 id="文件">文件</h2><h3 id="文件路径的使用">文件路径的使用</h3><ul><li>绝对路径:文件在计算机中的准确位置。一般绝对路径很长,可以以字符串形式存放在一个变量中。如:<code>home/ehmatthes/other_files/text.txt</code></li><li>相对路径:在没有指定绝对路径的情况下,python会优先读取程序文件所在目录。若要读取的文件放在程序文件所在目录的子目录下,则需要指定相对路径帮助python寻找文件。如:<code>text_files/filename.txt</code></li></ul><p>tip:Window系统在显示文件路径时会使用反斜杠(),python中使用斜杠(/)即可。但是如果使用反斜杠时,需要用两个连续的反斜杠(\)。这是由于单反斜杠()可能会转义某些字符,这会导致错误。</p><h3 id="文本文件.txt">文本文件(.txt)</h3><p>记事本可以创建文本文件,里面存储的最大信息量将由你的电脑内存决定。下面假设我们有一个文本文件pi_num.txt,其放在了程序文件的目录中,里面存储的内容如下: <figure class="highlight bash"><figcaption><span>pi_num.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><h4 id="文件读取">文件读取</h4><p>用下面的语句来读取整个文件: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'pi_num.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">contents = file_object.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span>  </span><br><span class="line">                 <span class="comment">#这里有个空行(ˉρˉ)</span></span><br></pre></td></tr></table></figure> 下面我们逐行分析代码的作用:</p><ul><li>关键字with</li></ul><blockquote><p>关键字with在不再需要访问文件后将其关闭</p></blockquote><p>我们大可以用一些函数来随时打开和关闭文件,但是再编程中的失误可能会导致在无需使用文件时让文件保持打开(这可能会导致数据的丢失或受损),在需要使用时文件又已经关闭了(无法访问)。让python自己去决定何时关闭文件将是一个不错的选择,你只管打开文件并使用它,让python自会在合适的时候自动关闭文件。</p><ul><li>函数open()</li></ul><blockquote><p>函数open()将在指定的模式下打开路径指向的文件(将文件放入内存中),并返回一个表示该文件的对象</p></blockquote><p>函数open()接受两个参数:第一个参数为文件的路径字符串,第二个参数决定函数以何种模式打开文件:<br>读取模式('r')、写入模式('w')、附加模式('a')、读写模式('r+')<br>省略第二个参数,python将以默认的只读模式打开文件。<br>注意:写入模式('w')将覆盖当前文本,即在写入之前删除文本内的所有内容。若想在文本后面添加内容请使用附加模式('a')<br>在写入模式和附加模式下,若路径指向的文件不存在,python会自动在指定的路径下新建一个空白的文本文档并使用它。<br>与之相应有函数close(),它接受文件的路径字符串,将关闭路径指向的文件。不推荐使用close()函数,利用关键字with能收获更好的效果和便利。</p><ul><li>关键字as</li></ul><blockquote><p>函数open()将返回一个文件的对象,关键字as将把该对象赋给<code>file_object</code>,后面将对这个文件对象进行操作。(也可以认为是关键字as给该文件对象指定了别名)</p></blockquote><p>注意,对象<code>file_object</code>是临时的,with下面的语句若想访问它需要进行缩进。当遇到未缩进的语句时,这个对象所在的内存将被释放(内容将会丢失)。</p><ul><li>方法read()</li></ul><blockquote><p>方法read()将读取文件对象的全部内容,并将其作为一个字符串返回。</p></blockquote><p>语句<code>contents = file_object.read()</code>,这里访问了file_object,故代码进行了缩进。变量contents将接受文件内容所组成的字符串,这可以从输出结果中看出。</p><ul><li>输出结果</li></ul><p>输出结果表面,方法read()将读取回车(\n)、空格,将他们一起赋给变量contents。同时方法read() 到达文件末尾时会返回一个空字符串,这个空字符串显示出来就是一个空行。<br>为了消除这个空行,可以使用方法rstrip(),它将删除字符串末尾的所有空白。<br></p><p>我们还可以逐行读取文件: 首先我们来看看如何利用for循环遍历文件的每一行: <figure class="highlight python"><figcaption><span>利用for循环逐行读取文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'pi_num.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line"><span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> 这些空行来自两个换行符:第一个来自于读取到的换行符,第二个来自于函数print()输出时加上的换行符。利用方法rstrip()消除第一个换行符吧。<br>现在我们将创建一个列表,其包含文件的各行内容: <figure class="highlight python"><figcaption><span>方法readlines()创建容纳各行内容的列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'pi_num.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure> &gt; 方法readlines()从文件中读取每一行,并以字符串形式存储在一个列表中。</p><p>当需要存储数值类型时,要用int()和float()将字符串格式转变为数值格式。</p><h4 id="使用文本内容">使用文本内容</h4><p>上面我们读取了文件的文本,并将其存储在一个变量或者列表中。现在我们就可以通过操作这个变量或列表来实现对文本的处理。 让我们来解决一个有趣的例子:圆周率中包含你的生日吗？ 代码如下: <figure class="highlight python"><figcaption><span>圆周率中包含你的生日吗？</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'pi_num.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">pi_string += line.strip()</span><br><span class="line"></span><br><span class="line">birth = <span class="built_in">input</span>(<span class="string">"Enter your birthday: "</span>)</span><br><span class="line"><span class="keyword">if</span> birth <span class="keyword">in</span> pi_string:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Yes"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"No"</span>)</span><br></pre></td></tr></table></figure> 这串代码中有几个细节:<br>利用for循环,我们可以得到一个中间不含空格的长字符串。<br>条件测试in可以测试左边的字符串是否存在于右边的字符串中。</p><h4 id="写入文件">写入文件</h4><p>我们可以创建一个空文件,利用python将文本写入空文件。或是在已有文件中添加内容。这里利用到函数open()的两种模式:写入模式('w')、附加模式('a')</p><ul><li>写入空文件</li></ul><p>由于是空文件,所以你可以提前新建一个文件,或是利用函数open()自动创建空文件。 利用写入模式('w')和方法write(),为空文件写入内容吧: <figure class="highlight python"><figcaption><span>为空文件写入内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'program.txt'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">file_object.write(<span class="string">"some words."</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>方法write()会将括号内的字符串写入文本文件中。</p></blockquote><p>运行这个程序不会有终端输出,但是当你打开文件program.txt后,将会看到该文本中出现一句话"some words."<br>这个文本文件将会————————和普通的文本文件没有什么不同,你完全可以对它进行如打开,输入文本,复制粘贴等等操作。<br>请注意,<strong>写入文档的是字符串</strong>,故若想写入数值,则需要使用函数str()将其转换为字符串格式。</p><ul><li>写入多行</li></ul><p>方法write()不会在写入的文本末尾添加换行符。故若你想写入不止一行的内容,请手动添加换行符(\n) 下面的两个例子将会让你看到换行符的重要性: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'program.txt'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">file_object.write(<span class="string">"some words."</span>)</span><br><span class="line">file_object.write(<span class="string">"other words."</span>)</span><br></pre></td></tr></table></figure> 写入的文本结果如下: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">some words.other words.</span><br></pre></td></tr></table></figure> 加上换行符(\n): <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'program.txt'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">file_object.write(<span class="string">"some words.\n"</span>)</span><br><span class="line">file_object.write(<span class="string">"other words.\n"</span>)</span><br></pre></td></tr></table></figure> 写入的文本结果如下: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some words.</span><br><span class="line">other words.</span><br><span class="line"></span><br></pre></td></tr></table></figure> 你可以使用空格,制表符(\t)和空行(\n)等等来设置输出格式。</p><ul><li>附加模式</li></ul><p>利用函数open()的写入模式('w')打开文件时千万要小心,因为如果指定的文件已经存在,Python将在返回文件对象前清空该文件的内容。<br>但以附加模式('a')打开文件就不会产生上述情况,python会将写入文件的行添加到文件末尾。该模式同样会在指定文件不存在时为你创建一个空文本文档。 同样我们需要使用方法write(),现在就为上面的文本文档添加一些内容吧: <figure class="highlight python"><figcaption><span>添加内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'program.txt'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">'a'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">file_object.write(<span class="string">"add words.\n"</span>)</span><br></pre></td></tr></table></figure> 附加的文本结果如下: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">some words.</span><br><span class="line">other words.</span><br><span class="line">add words.</span><br><span class="line"></span><br></pre></td></tr></table></figure> 但是如果采用写入模式('w')打开文件,则上述程序的文本结果为: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add words.</span><br><span class="line"></span><br></pre></td></tr></table></figure> 它删掉了文本原来的内容！<br>所以要注意区分写入模式(Write mode)和附加模式(Additional mode)的区别,在需要的时候正确的选择和使用它们。</p><h3 id="模块json和json文件.json">模块json和json文件(.json)</h3><blockquote><p>模块json能让你将简单的python数据结构转储到文件中,并在程序再次运行时加载该文件中的数据。</p></blockquote><p>json(JavaScript Object Notation)格式最初是为JavaScript开发的,但随后成了一种常见格式,被包括Python在内的众多语言采用。<br>模块json具有众多优点:</p><ul><li>可以使用json在Python程序之间分享数据</li><li>json数据格式并非Python专用的,这让你能够将以json格式存储的数据与使用其他编程语言的人分享</li><li>json是一种轻便而有用的格式,易于学习</li></ul><p>json数据格式文件的文件拓展名为:<code>.json</code></p><p>导入json模块: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">        <span class="comment">#加个空行和主程序代码隔开</span></span><br></pre></td></tr></table></figure></p><p>下面我们来利用模块json存储数据,并读取使用这些数据。</p><h4 id="函数json.dump与json.load">函数json.dump()与json.load()</h4><p>这是模块json中的两个函数。</p><ul><li>存储数据</li></ul><blockquote><p>函数json.dump():接受两个实参:要存储的数据,可用于存储数据的文件对象</p></blockquote><p>注意,存储数据文件对象的拓展名应为:.json。如果你不想单独创建,就让函数open()自动创建一个文件吧。 下面来举一个例子: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">datas = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'datas.json'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f:  <span class="comment">#以写入模式打开文件</span></span><br><span class="line">json.dump(datas,f)</span><br></pre></td></tr></table></figure> 打开datas.json,数据的存储格式和python相同: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure></p><ul><li>读取数据</li></ul><blockquote><p>函数json.load():接受一个json文件对象,返回其存储的数据</p></blockquote><p>举例: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'datas.json'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">datas = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datas)</span><br></pre></td></tr></table></figure></p><h2 id="异常">异常</h2><p>当程序执行产生错误时,python会创建一个<strong>异常对象</strong>。若你编写了处理该异常的代码,程序将继续运行。若没有对异常进行处理,程序将停止运行并显示一条traceback。</p><h3 id="关于traceback">关于Traceback</h3><p>首先我们创建一个异常,并返回一条traceback: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">6</span>/<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"division_calculator.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure> Traceback常常让人迷惑(•﹏•),但是其实Traceback将给予我们相当多的信息,不怀好意的人可能可以通过这些信息来攻破我们的程序。</p><ul><li>第一行:告诉你显示了一条Traceback,程序出现了错误且没有对异常进行处理</li><li>第二行:产生错误的代码所在的文件名,代码所在的行数,代码在那个模块中(代码所在程序文件,则显示为<module>)</module></li><li>第三行:产生错误的具体代码</li><li>第四行:异常对象名(ZeroDivisionError),以及对其的一条描述</li></ul><p>(但是看不懂还是真看不懂。。。)<br>若我们对异常进行了处理,程序出现了该类错误时往往就不会返回一条traceback(追溯错误)。</p><h3 id="try-except-else代码块">try-except-else代码块</h3><p>处理异常,可以使用<code>try-except-else</code>代码块。这样往往就不会在程序出错时返回一条Traceback。 我们现在来处理上面的ZeroDivisionError异常: 我们现在来编写一个除法计算器: <figure class="highlight python"><figcaption><span>除法计算器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give two numbers,"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit.\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">first_number = <span class="built_in">input</span>(<span class="string">"First number:"</span>)</span><br><span class="line"><span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">second_number = <span class="built_in">input</span>(<span class="string">"Second number:"</span>)</span><br><span class="line"><span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">answer = <span class="built_in">int</span>(first_number)/<span class="built_in">int</span>(second_number)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{answer}</span>\n"</span>)</span><br></pre></td></tr></table></figure> 如果输入除数为0,则会返回一条traceback!</p><p>现在我们利用try-except-else代码块来改写程序: <figure class="highlight python"><figcaption><span>改进的除法计算器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give two numbers,"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit.\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">first_number = <span class="built_in">input</span>(<span class="string">"First number:"</span>)</span><br><span class="line"><span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">second_number = <span class="built_in">input</span>(<span class="string">"Second number:"</span>)</span><br><span class="line"><span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">answer = <span class="built_in">int</span>(first_number)/<span class="built_in">int</span>(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"divide zero!\n"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{answer}</span>\n"</span>)</span><br></pre></td></tr></table></figure> 首先,这个程序接受两个数;<br>对除式<code>answer = int(first_number)/int(second_number)</code>进行测试;<br>若出现了ZeroDivisionError异常,则执行except下面缩进的代码,同时跳过else下面缩进的代码;<br>若没有出现ZeroDivisionError异常,则跳过except下面缩进的代码,执行else下面缩进的代码;<br>若输入字符q,则退出程序。</p><p>现在我们来运行一下这个程序: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Give two numbers,</span><br><span class="line">Enter <span class="string">'q'</span> to quit.</span><br><span class="line"></span><br><span class="line">First number:<span class="number">5</span></span><br><span class="line">Second number:<span class="number">4</span></span><br><span class="line"><span class="number">1.25</span></span><br><span class="line"></span><br><span class="line">First number:<span class="number">6</span></span><br><span class="line">Second number:<span class="number">0</span></span><br><span class="line">divide zero!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">8</span></span><br><span class="line">Second number:<span class="number">4</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure> 即使出现了除数为0的错误,也只是显示了一条提示信息<code>divide zero!</code>,整个程序并没有停止运行。这满足了我们的要求。</p><p>这就是try-except-else代码块的运行机制。首先执行try下面的缩进代码,若没有出现异常,则跳过except缩进代码,执行else缩进代码。若出现异常,则执行except缩进代码,跳过else缩进代码。</p><p>else代码块可以省略,表示没有异常则什么都不做。这样就变成了<code>try-except</code>代码块。</p><ul><li>静默失败</li></ul><p>有时候你希望程序在发生异常时保持静默,就像什么都没有发生一样继续运行。</p><blockquote><p>pass语句:让python在代码块中什么都不要做</p></blockquote><p>在except下面使用pass语句,即可在出现异常时不做任何事情,程序继续执行: <figure class="highlight python"><figcaption><span>静默失败的除法计算器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give two numbers,"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit.\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">first_number = <span class="built_in">input</span>(<span class="string">"First number:"</span>)</span><br><span class="line"><span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">second_number = <span class="built_in">input</span>(<span class="string">"Second number:"</span>)</span><br><span class="line"><span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">answer = <span class="built_in">int</span>(first_number)/<span class="built_in">int</span>(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"<span class="subst">{answer}</span>\n"</span>)</span><br></pre></td></tr></table></figure> 运行一下试试: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give two numbers,</span><br><span class="line">Enter <span class="string">'q'</span> to quit.</span><br><span class="line"></span><br><span class="line">First number:<span class="number">5</span></span><br><span class="line">Second number:<span class="number">5</span></span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">First number:<span class="number">2</span></span><br><span class="line">Second number:<span class="number">0</span></span><br><span class="line">First number:<span class="number">30</span></span><br><span class="line">Second number:<span class="number">6</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><h4 id="filenotfounderror异常与valueerror异常">FileNotFoundError异常与ValueError异常</h4><ul><li>若指定的文件不存在,或者文件名不正确,则在调用该文件时会引发<code>FileNotFoundError</code>异常</li><li>若需要字符串的时输入数值,或是需要数值时输入字符串,即输入的数据类型不符合程序需要,则会引发<code>ValueError</code>异常</li></ul><p>后面会举例说明FileNotFoundError异常的处理。</p><p>在这里补充一个知识:<br>函数open()的第二个参数可以是<code>encoding='utf-8'</code>。在系统的默认编码与要读取文件使用的编码不一致时,必须这样做。</p><h4 id="分析文本">分析文本</h4><p>首先介绍方法split():</p><blockquote><p>方法split()以空格为分隔符将字符串分拆成多个部分,并将这些部分都存储到一个列表中。</p></blockquote><p>我们可以利用该方法,以列表的形式存储一个英文字符串中的所有单词。利用函数len()我们还能统计该英文字符串中所含的单词数量。</p><p>首先来用split()举一个简单的栗子: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>title = <span class="string">"Alice in Wonderland"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>title.split()</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'in'</span>, <span class="string">'Wonderland'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(title.split())</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure> 现在我们来编写一个函数,调用一个文本文件(存储了一篇英文文章),统计该文本内的单词数,并希望在产生FileNotFoundError异常时输出一条提示语句。 <figure class="highlight python"><figcaption><span>统计单词数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span>(<span class="params">filename</span>):</span></span><br><span class="line"><span class="string">"""计算一个文本中大致包含多少个单词"""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Sorry,the file <span class="subst">{filename}</span> does not exist."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">words = contents.split()</span><br><span class="line">num_words = <span class="built_in">len</span>(words)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"The <span class="subst">{filename}</span> has about <span class="subst">{num_words}</span> words."</span>)</span><br></pre></td></tr></table></figure> 你可以调用这个函数来统计单词数。</p><h3 id="决定报告那些错误">决定报告那些错误</h3><p>何时对异常进行处理,使用何种处理等等需要根据需求来决定。下面是教材举例的几种情况:</p><ul><li>如果用户知道要分析哪些文件,他们可能希望在有文件却没有分析时出现一条消息来告知原因;</li><li>如果用户只想看到结果,并不知道要分析哪些文件,可能就无须在有些文件不存在时告知他们。</li></ul><p>Python的错误处理结构让你能够细致地控制与用户分享错误信息的程度,要分享多少信息由你决定。</p><h2 id="重构">重构</h2><blockquote><p>重构:一段能够正确运行的代码,将其划分为一系列完成具体工作的函数的过程。</p></blockquote><p>重构让代码更清晰、更易于理解、更容易扩展。</p><p>在项目中,某个过程会重复使用时,不妨把它编成一个函数或者放在一个类中吧。</p><h2 id="测试">测试</h2><blockquote><p>编写函数或类时,还可为其编写测试。通过测试,可确定代码面对各种输入都能够按要求的那样工作。测试让你深信,即便有更多人使用你的程序,它也能正确地工作。</p></blockquote><p>利用模块unittest,我们可以编写测试用例,并用它来测试代码。这里将介绍如何测试函数和类。<br>让我们先导入unittest模块吧: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br></pre></td></tr></table></figure></p><h3 id="断言方法">断言方法</h3><p>在测试一个函数或类的行为是否正常时,我们需要为测试制定一组问题和答案。</p><blockquote><p>断言方法检查你认为应该满足的条件是否确实满足。</p></blockquote><p>断言方法是unittest类最有用的功能之一。unittest模块中有6个常用的断言方法,它们分别核实不同的情况。<br>注意:<strong>只能在继承unittest.TestCase的类中使用这些方法</strong></p><table><thead><tr class="header"><th style="text-align: center;">断言方法</th><th style="text-align: center;">用途</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">assertEqual(a,b)</td><td style="text-align: center;">核实a == b</td></tr><tr class="even"><td style="text-align: center;">assertNotEqual(a,b)</td><td style="text-align: center;">核实a != b</td></tr><tr class="odd"><td style="text-align: center;">assertTrue(x)</td><td style="text-align: center;">核实x == True</td></tr><tr class="even"><td style="text-align: center;">assertFalse(x)</td><td style="text-align: center;">核实x == False</td></tr><tr class="odd"><td style="text-align: center;">assertIn(item,list)</td><td style="text-align: center;">核实item在list中</td></tr><tr class="even"><td style="text-align: center;">assertNotIn(item,list)</td><td style="text-align: center;">核实item不在list中</td></tr></tbody></table><h3 id="测试函数">测试函数</h3><p>首先我们编写一个简单函数用于测试: <figure class="highlight python"><figcaption><span>生成姓名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">first,last</span>):</span></span><br><span class="line">full_name = <span class="string">f"<span class="subst">{first}</span> <span class="subst">{last}</span>"</span></span><br><span class="line"><span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure></p><h4 id="单元测试与测试用例">单元测试与测试用例</h4><blockquote><p>单元测试用于核实函数的某个方面没有问题<br>测试用例是一组单元测试</p></blockquote><blockquote><p>全覆盖:包含一整套单元测试,涵盖了各种可能的函数使用方式。</p></blockquote><p>最初只要针对代码的重要行为编写测试即可,等项目被广泛使用时再考虑全覆盖。</p><h4 id="编写单元测试">编写单元测试</h4><p>导入模块unittest和要测试的函数后,需要再创建一个继承unittest.TestCase的类,并编写一些用于测试的方法。 下面是一个简单的单元测试: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">first,last</span>):</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name_test</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="string">"""测试函数get_name"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_name</span>(<span class="params">self</span>):</span></span><br><span class="line">formatted_name = get_name(<span class="string">'andi'</span>,<span class="string">'bob'</span>)</span><br><span class="line">self.assertEqual(formatted_name,<span class="string">'Andi Bob'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure> 首先导入了模块unittest和函数get_name()<br>然后创建了一个继承unittest.TestCase的类Name_test<br>接着定义一个方法test_name(),这将用于测试函数get_name()的一个方面。这里我们利用了unittest类的功能之一:断言方法asserEqual()。<br><code>self.assertEqual(formatted_name,'Andi Bob')</code>代码的作用,是将formatted_name的值和字符串'Andi Bob'比较。如果它们相等,那就万事大吉；如果它们不相等,就告诉我们一声。<br></p><p>关于语句<code>if __name__ == '__main__'</code>,特殊变量<code>__name__</code>是在程序执行时设置的。<br>若这个文件作为主程序执行,则__name__将被设置为'<strong>main</strong>',便会调用unittest.main()来运行测试用例(测试用例是一系列单元测试,故会运行每个单元测试)。[若这个文件是被测试框架导入,则变量__name__的值将不是'<strong>main</strong>',故不会调用下面的方法]</p><h4 id="单元测试的结果">单元测试的结果</h4><p>[不同的编辑器,单元测试结果的显示形式不同,这里是pycharm编辑器的显示形式]</p><ul><li>若单元测试通过,则输出结果如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.002</span>s   <span class="comment">#第一部分</span></span><br><span class="line"> </span><br><span class="line">OK                     <span class="comment">#第二部分</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个输出结果第一部分告诉你进行了几次测试,测试所用的总时间;<br>第二部分输出一个OK让我心安。</p><ul><li>若单元测试未通过,则输出结果如下:(这里修改语句self.assertEqual(formatted_name,'AndiBob'),去掉空格,故意使得测试未通过)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.004</span>s       <span class="comment">#第一部分</span></span><br><span class="line"></span><br><span class="line">FAILED (failures=<span class="number">1</span>)        <span class="comment">#第二部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AndiBob != Andi Bob        <span class="comment">#第三部分</span></span><br><span class="line"></span><br><span class="line">Expected :Andi Bob</span><br><span class="line">Actual   :AndiBob</span><br><span class="line">&lt;Click to see difference&gt;</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):      <span class="comment">#第四部分</span></span><br><span class="line">  File <span class="string">"D:\python codes\codes\code1.py"</span>, line <span class="number">13</span>, <span class="keyword">in</span> test_name_1</span><br><span class="line">    self.assertEqual(formatted_name,<span class="string">'AndiBob'</span>)</span><br><span class="line">AssertionError: <span class="string">'Andi Bob'</span> != <span class="string">'AndiBob'</span></span><br><span class="line">- Andi Bob</span><br><span class="line">?     -</span><br><span class="line">+ AndiBob</span><br></pre></td></tr></table></figure><p>第一部分同样告诉你进行了几场测试,测试所用的总时间;<br>第二部分告诉你未通过的测试数<code>failures=1</code>;<br>第三部分告诉你测试未通过的原因<code>AndiBob != Andi Bob</code>,下面跟着一个简单解释;<br>第四部分返回一个Traceback,并创建了一个AssertionError异常。</p><ul><li>最后一种情况,如果函数本身的运行出现问题,则输出结果如下:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.003</span>s</span><br><span class="line"></span><br><span class="line">FAILED (errors=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Error</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\python codes\codes\code1.py"</span>, line <span class="number">12</span>, <span class="keyword">in</span> test_name_1</span><br><span class="line">    formatted_name = get_name(<span class="string">'andi'</span>)</span><br><span class="line">TypeError: get_name() missing <span class="number">1</span> required positional argument: <span class="string">'last'</span></span><br></pre></td></tr></table></figure><p>实际上,由于产生错误,测试会被迫停止,如果还有其它测试,则余下的测试将不会进行。对于函数本身的错误,它会计入测试未通过,但是将只附加返回一条Traceback。</p><h4 id="编写测试用例">编写测试用例</h4><p>为类Name_test编写一系列的单元测试就是在编写测试用例。 我们可以添加新的测试,即为Name_test类编写新的方法即可: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">first,last</span>):</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name_test</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="string">"""测试函数get_name"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_name</span>(<span class="params">self</span>):</span></span><br><span class="line">formatted_name = get_name(<span class="string">'andi'</span>,<span class="string">'bob'</span>)</span><br><span class="line">self.assertEqual(formatted_name,<span class="string">'Andi Bob'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_new_name</span>(<span class="params">self</span>):</span>      <span class="comment">#新的单元测试</span></span><br><span class="line">formatted_new_name = get_name(<span class="string">'cindy'</span>,<span class="string">'mary'</span>)</span><br><span class="line">self.assertEqual(formatted_new_name,<span class="string">'Cindy Mary'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure> 放心,语句<code>unittest.main()</code>会逐步运行所有基于Name_test类编写的测试。</p><h3 id="测试类">测试类</h3><p>测试类亦即测试类中的方法。首先你要编写一个类,并给类编写一个方法。接着创建一个继承unittest.TestCase类的子类,并在该类中编写测试。最终在主程序中调用unittest.main()执行测试。测试结果的表示将和函数的测试类似,故不再举例。</p><p>我们在这里编写一个类,并编写一个方法,用于存储你最喜欢的语言: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Survey</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">self.responses = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_response</span>(<span class="params">self,new_response</span>):</span></span><br><span class="line">self.responses.append(new_response)</span><br></pre></td></tr></table></figure> 我们为其编写一个测试,用于测试我们的答案是否被妥善地存储了: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Survey</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_survey</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_store_responses</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">"""测试方法store_responses()是否能够妥善存储单个答案"""</span></span><br><span class="line">my_survey = Survey()</span><br><span class="line">my_survey.store_response(<span class="string">'Chinese'</span>)</span><br><span class="line">self.assertIn(<span class="string">'Chinese'</span>,my_survey.responses)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></p><ul><li>方法setUp()</li></ul><p>每次测试类,我们都需要创建一个实例,并在每个方法中都创建答案。方法setUp()让我们只需要创建这些对象一次,就能在每个测试方法中使用它们。<br>若TestCase类(继承了unittest.TestCase类)中包含了方法setUp(),python将先运行它,再运行其它方法。故在编写的每个测试中都可使用在方法setUp()中创建的对象。 举个例子: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Survey</span>:</span></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_survey</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">"""创建一个调查对象和一组答案,以供测试方法使用"""</span></span><br><span class="line">self.my_survey = Survey()</span><br><span class="line">self.responses = [<span class="string">'Chinese'</span>,<span class="string">'English'</span>,<span class="string">'Mandarin'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_store_responses</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">"""测试方法store_response()是否能够妥善存储多个答案"""</span></span><br><span class="line"><span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">self.my_survey.store_response(response)</span><br><span class="line"><span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">self.assertIn(response,self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure> 活用方法setUp()将带来不少便利。</p><p>最后,python默认的文本编辑器(IDLE(Python))里进行测试,测试显示结果为:句点(.),E,F</p><ul><li>测试通过时打印一个句点(.);</li><li>测试引发错误时打印一个E,并停止余下测试,返回一条Traceback;</li><li>测试导致断言失败时则打印一个F,并指出断言失败的测试名,返回一条Traceback。</li></ul><hr><h1 id="查看模块的文档和帮助信息">查看模块的文档和帮助信息</h1><p>当使用一个模块时,我们希望了解模块的帮助文档以便我们使用模块中的内容.</p><ul><li>函数help()</li></ul><p>如需要查看json模块的信息: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">help</span>(json)</span><br></pre></td></tr></table></figure> 模块最好是先导入,再查看,防止出现问题,下面同样如此。<br>参数为某个第三方模块名时,将查看该第三方模块的官方文档。</p><ul><li>查询函数信息</li></ul><p>查看模块中的所有函数信息: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"><span class="built_in">dir</span>(module_name)</span><br></pre></td></tr></table></figure> 查看模块中某个函数的信息: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"><span class="built_in">help</span>(module_name.func_name)</span><br></pre></td></tr></table></figure> 如果是查看某个包中的方法 的文档,可以类似上面的语句进行查看. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bag_name</span><br><span class="line"><span class="built_in">help</span>(bag_name.func_name)</span><br></pre></td></tr></table></figure> (句点表示法太有用了!!!)</p><ul><li>python第三方库的文档列表</li></ul><p>我们可以利用python创建一个网页,它将根据你的安装目录显示所有已安装的第三方库,我们可以利用某个未使用的网络端口进行查看:这里采用4000端口,这项操作同样可在命令提示符(cmd)中进行: <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">admin</span>&gt;<span class="title">D</span>:</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">python</span> -<span class="title">m</span> <span class="title">pydoc</span> -<span class="title">p</span> 4000</span></span><br></pre></td></tr></table></figure> 运行结果: <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Server ready <span class="built_in">at</span> http://localhost:<span class="number">4000</span>/</span><br><span class="line">Server commands: [b]rowser, [q]uit</span><br><span class="line">server&gt; </span><br></pre></td></tr></table></figure> 现在你可以打开4000端口并查看文档列表了,按<code>q+Enter</code>退出。</p><ul><li>Python documentation (python官方文档)</li></ul><p>登录python官网，点击最上方栏中的<code>Docs</code>来查看它吧。</p><p>在需要时去查看这些文档和帮助吧,也许能解决不少问题。</p><hr><h1 id="尾言">尾言</h1><p>至此,python的基础知识就全部介绍完了。关于python的项目,有生之年吧(〟-_・)ﾝ<br>还是要再次推荐这本教材(Python编程:从入门到实践（第二版）（美）埃里克·马瑟斯[著]),语言容易理解,有大量的实例可以思考。<br>The end~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我学习python的历程,你将见证一个拖延症晚期的人最后的自律。&lt;br&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://qioh.github.io/tags/python/"/>
    
  </entry>
  
</feed>
